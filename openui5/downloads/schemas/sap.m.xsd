<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.m" xmlns:n0="sap.ui.core" xmlns:n1="sap.m">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="ActionListItem" type="n1:_ActionListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>ActionListItem should be used to fire actions when tapped.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ActionSelect" type="n1:_ActionSelectType" substitutionGroup="n1:Select">
<xsd:annotation>
<xsd:documentation>The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ActionSheet" type="n1:_ActionSheetType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="App" type="n1:_AppType" substitutionGroup="n1:NavContainer">
<xsd:annotation>
<xsd:documentation>App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
It also adds certain header tags to the HTML page which are considered useful for mobile apps.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar" type="n1:_BarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A bar that may be used as a header of a page. It has the capability to center a content like a title, while having few controls on the left and right side.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BusyDialog" type="n1:_BusyDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BusyIndicator" type="n1:_BusyIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Control to indicate that the system is busy with some task and the user has to wait.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Button" type="n1:_ButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Carousel" type="n1:_CarouselType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.

Note: when displa Internet Explorer 9, page changes are not animated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CheckBox" type="n1:_CheckBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>CheckBox control</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Column" type="n1:_ColumnType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The column allows to define column specific properties that will be applied when rendering the List.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnListItem" type="n1:_ColumnListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>ColumnListItem can be used with cells aggregation to create rows for the Table control.
The columns aggregation of the Table should match with the cells aggregation.

NOTE: This control does not respect the counter property of the ListItemBase.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBox" type="n1:_ComboBoxType" substitutionGroup="n1:ComboBoxBase">
<xsd:annotation>
<xsd:documentation>The ComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBoxBase" type="n1:_ComboBoxBaseType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>An abstract class for ComboBoxes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CustomListItem" type="n1:_CustomListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well.
Note: Even the content aggregation allows any control, complex responsive layout controls (e.g. Table, Form) should not be aggregated as content.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CustomTile" type="n1:_CustomTileType" substitutionGroup="n1:Tile">
<xsd:annotation>
<xsd:documentation>Use the Custom Tile to show a application specific content in the tile.
The tile width is 8.5em and height is 10em</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DatePicker" type="n1:_DatePickerType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>This is an date input control with a calendar DatePicker.
It internal uses the sap.ui.unified.Calendar. So the sap.ui.unified library should be loaded from applications using this control. (Otherwise it will be loaded by opening the DatePicker.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateRangeSelection" type="n1:_DateRangeSelectionType" substitutionGroup="n1:DatePicker">
<xsd:annotation>
<xsd:documentation>This is a date range selection control. It internal uses the sap.ui.unified.Calendar. So the sap.ui.unified library should be loaded from applications using this control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateTimeInput" type="n1:_DateTimeInputType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>Allows end users to interact with date and/or time and select from a date and/or time pad.
Note: Since 1.22, this control should not be used as a date picker(type property "Date"), instead please use dedicated sap.m.DatePicker control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Dialog" type="n1:_DialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DisplayListItem" type="n1:_DisplayListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The display list item consists of a label and a value.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilter" type="n1:_FacetFilterType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>FacetFilter is used to provide filtering functionality with multiple parameters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilterItem" type="n1:_FacetFilterItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>Represents a value for the FacetFilterList control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FacetFilterList" type="n1:_FacetFilterListType" substitutionGroup="n1:List">
<xsd:annotation>
<xsd:documentation>FacetFilterList represents a list of values for the FacetFilter control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedInput" type="n1:_FeedInputType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Feed Input allows the user to enter text for a new feed entry and then post it.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedListItem" type="n1:_FeedListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The control provides a set of properties for text, sender information, time stamp.
Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlexBox" type="n1:_FlexBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The FlexBox control builds the container for a flexible box layout.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlexItemData" type="n1:_FlexItemDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for a FlexBox</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupHeaderListItem" type="n1:_GroupHeaderListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The group header list item is used to display the title of a group and act as separator between groups in Lists.

There are several API parts inherited from ListItemBase which do not apply here:
The properties "type", "unread", "selected" and "counter" are currently ignored.
Tap events will not be fired.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GrowingList" type="n1:_GrowingListType" substitutionGroup="n1:List">
<xsd:annotation>
<xsd:documentation>sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HBox" type="n1:_HBoxType" substitutionGroup="n1:FlexBox">
<xsd:annotation>
<xsd:documentation>The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabBar" type="n1:_IconTabBarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>IconTabBar control is similar to the standard tab bar control. It represents a collection of tabs with associated content. The tabs can have text, count and an icon.

IconTabBar can have two behaviors:
- Like a filter – There is only one main content for all tabs. The main content can be filtered, based on the selected tab.
- Like a normal tab bar - The contents of each tab are independent from each other.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabFilter" type="n1:_IconTabFilterType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The filter item class</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabHeader" type="n1:_IconTabHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control display a number of iconTabFilters and Separators. If the available horizontal space is exceeded, it will allow for scrolling horziontally to show all items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="IconTabSeparator" type="n1:_IconTabSeparatorType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A tab separator item class</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Image" type="n1:_ImageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A wrapper around the IMG tag. The image can be loaded from a remote or local server.

Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.

There are various size setting options available, and the images can be combined with actions.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Input" type="n1:_InputType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>Enables users to input data.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="InputBase" type="n1:_InputBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Base control for Input fields.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="InputListItem" type="n1:_InputListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>List item should be used for a label and an input field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Label" type="n1:_LabelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Link" type="n1:_LinkType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="List" type="n1:_ListType" substitutionGroup="n1:ListBase">
<xsd:annotation>
<xsd:documentation>The List control provides a container for all types of list items.
For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ListBase" type="n1:_ListBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>sap.m.ListBase Control provides a basic functionality of List and Table. Selection, deletion, unread states and inset style are also maintained here.

Note: The ListBase including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ListItemBase" type="n1:_ListItemBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ListItemBase contains the core features of all specific list items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePage" type="n1:_MessagePageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>MessagePage is displayed when there is no data or matching content. There are different use cases where a MessagePage might be visualized, for example:
	- The search query returned no results
	- The app contains no items
	- There are too many items
	- The application is loading
The layout is unchanged but the text varies depending on the use case.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePopover" type="n1:_MessagePopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A MessagePopover is a Popover containing a summarized list with messages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagePopoverItem" type="n1:_MessagePopoverItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>Items provide information about Error Messages in the page.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MultiComboBox" type="n1:_MultiComboBoxType" substitutionGroup="n1:ComboBoxBase">
<xsd:annotation>
<xsd:documentation>The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MultiInput" type="n1:_MultiInputType" substitutionGroup="n1:Input">
<xsd:annotation>
<xsd:documentation>MultiInput provides functionality to add / remove / enter tokens</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavContainer" type="n1:_NavContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.

All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectAttribute" type="n1:_ObjectAttributeType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ObjectAttribute displays a text field that can be normal or active. Object attribute fires a press event when the user selects active text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectHeader" type="n1:_ObjectHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ObjectHeader is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectIdentifier" type="n1:_ObjectIdentifierType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ObjectIdentifier is a display control that enables the user to easily identify a specific object. The object identifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectListItem" type="n1:_ObjectListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>ObjectListItem is a display control that provides summary information about an object as an item in a list. The object list item title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectNumber" type="n1:_ObjectNumberType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ObjectNumber displays number and number unit properties for an object. The number can be displayed using semantic colors to provide addition meaning about the object to the user.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectStatus" type="n1:_ObjectStatusType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Status information that may be either text with a value state, or an icon.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="OverflowToolbar" type="n1:_OverflowToolbarType" substitutionGroup="n1:Toolbar">
<xsd:annotation>
<xsd:documentation>The OverflowToolbar control is a container based on sap.m.Toolbar, that provides overflow when its content does not fit in the visible area.

Note: Currently only controls of type sap.m.Button can move to the overflow area, but in future versions other controls will be able to as well. 
For this reason it is advisable to always set layoutData with property "moveToOverflow" to "false" for all controls that are never intended to overflow, regardless of their type.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="OverflowToolbarLayoutData" type="n1:_OverflowToolbarLayoutDataType" substitutionGroup="n1:ToolbarLayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for the OverflowToolbar items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nColumnsItem" type="n1:_P13nColumnsItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The ColumnsItem can be used to fill columnsItem aggregation in P13nColumnsPanel</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nColumnsPanel" type="n1:_P13nColumnsPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The ColumnsPanel can be used for personalization of the table to define column specific settings</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nConditionPanel" type="n1:_P13nConditionPanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ConditionPanel Control will be used to realize the Sorting, Filtering and Grouping
       panel of the new Personalization dialog.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nDialog" type="n1:_P13nDialogType" substitutionGroup="n1:Dialog">
<xsd:annotation>
<xsd:documentation>The P13nDialog control provides dialog that contains one or more panels. On each of the panels, one or more changes with regards to a
       table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter
       tables.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nFilterItem" type="n1:_P13nFilterItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nFilterPanel" type="n1:_P13nFilterPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The FilterPanel Control can be used to...</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nGroupItem" type="n1:_P13nGroupItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nGroupPanel" type="n1:_P13nGroupPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The GroupPanel Control can be used to...</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nItem" type="n1:_P13nItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>tbd (should enable panels of personalization to have a constistent view of the 'columns' of the table)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nPanel" type="n1:_P13nPanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nSortItem" type="n1:_P13nSortItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="P13nSortPanel" type="n1:_P13nSortPanelType" substitutionGroup="n1:P13nPanel">
<xsd:annotation>
<xsd:documentation>The SortPanel Control can be used to...</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Page" type="n1:_PageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Panel" type="n1:_PanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Panel control is a container for controls with a solid background and a header text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Popover" type="n1:_PopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ProgressIndicator" type="n1:_ProgressIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
Additionally, a user defined string can be displayed on the ProgressIndicator.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PullToRefresh" type="n1:_PullToRefreshType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButton" type="n1:_RadioButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>RadioButton is a control similar to CheckBox. It allows the user to choose only one of the predefined set of options.

Usually, RadioButton is used in a group with other RadioButtons (with the groupName property or by using sap.m.RadioButtonGroup), thus providing a limited choice for the user.
An event is triggered when the user makes a change of the selection.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButtonGroup" type="n1:_RadioButtonGroupType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control is used as a wrapper for a group of RadioButton controls, which then can be used as a single UI element.
You can select only one of the grouped radio buttons at a time. Some of the radio buttons can be configured as inactive (they are displayed as grayed out).
The grouped radio buttons can be arranged within different number of columns.
Based on the number of specified columns and the number of radio buttons used, different layout types can be achieved - as a 'matrix', horizontally or vertically aligned radio buttons, etc.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RatingIndicator" type="n1:_RatingIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the
image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsivePopover" type="n1:_ResponsivePopoverType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet while acts as a sap.m.Dialog with stretch set to true on phone.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ScrollContainer" type="n1:_ScrollContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.

Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SearchField" type="n1:_SearchFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to input a search string.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SegmentedButton" type="n1:_SegmentedButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SegmentedButtonItem" type="n1:_SegmentedButtonItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>SegmentedButtonItem is used for creating buttons for the sap.m.SegmentedButton.
It is derived from a core sap.ui.core.Item</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Select" type="n1:_SelectType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The select control provides a menu of predefined items that allows users to select an item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectDialog" type="n1:_SelectDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A SelectDialog is a dialog containing a list and search functionality to filter the list and confirmation/cancel buttons. The control can be used when the user should select one or multiple items out of many.

The list used in the SelectDialog is a growing list and can be filled with a any kind of list item. The search field triggers the events "search" and "liveChange" where a filter function can be applied to the list binding.

After selecting an item in single selection mode or after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired with the items that have been selected. By default, the selection will also be reset to allow for a new selection when opening the dialog again.

When cancelling the selection, the event "change" will be fired and the selection is restored to the state when the dialog was opened.

NOTE: The growing functionality of the list does not support Two Way Binding, so if you use this control with a JSON model make sure the binding mode is set to "OneWay" and that you update the selection model manually with the items passed in the "confirm" event.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectList" type="n1:_SelectListType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control displays a list of items to allow the user to select an item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Shell" type="n1:_ShellType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Shell control can be used as root element of applications, it can contain an App or SplitApp control.
The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Slider" type="n1:_SliderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A slider is a user interface control that enables the user to adjust values in a specified numerical range.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitApp" type="n1:_SplitAppType" substitutionGroup="n1:SplitContainer">
<xsd:annotation>
<xsd:documentation>SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitContainer" type="n1:_SplitContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>SplitContainer maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitContainer.

This control must be rendered as a full screen control in order to make the show/hide master area work properly.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StandardListItem" type="n1:_StandardListItemType" substitutionGroup="n1:ListItemBase">
<xsd:annotation>
<xsd:documentation>The StandardListItem is a list item providing image, titel and description.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StandardTile" type="n1:_StandardTileType" substitutionGroup="n1:Tile">
<xsd:annotation>
<xsd:documentation>The StandardTile</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Switch" type="n1:_SwitchType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Table" type="n1:_TableType" substitutionGroup="n1:ListBase">
<xsd:annotation>
<xsd:documentation>The Table control provides a set of sophisticated and convenience functions for responsive table design.
For mobile devices, the recommended limit of table rows is 100(based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TableSelectDialog" type="n1:_TableSelectDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A TableSelectDialog provides you a easier way to create a dialog that contains a list with grouping and search functionality.
The Table used in a SelectDialog is a Table with Columns. After selecting an item, the dialog will be closed and a callback function will return the item being selected.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Text" type="n1:_TextType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The text control can be used for embedding longer paragraphs of text into your application, that need text wrapping.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TextArea" type="n1:_TextAreaType" substitutionGroup="n1:InputBase">
<xsd:annotation>
<xsd:documentation>Enable users to input multi-line text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tile" type="n1:_TileType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A tile to be displayed in the tile container. Use this
tile as the base class for
specialized tile implementations.
Use the renderers _addOuterClass methods to add a style class to the main
surface of the Tile. In this class set the background color, gradients
or background images.
Instead of implementing the default render method in the renderer implement
your content HTML in the _renderContent method of the specialized
tile.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TileContainer" type="n1:_TileContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A container that arranges same-size tiles nicely on carousel pages</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Title" type="n1:_TitleType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Title control is used for header texts and title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToggleButton" type="n1:_ToggleButtonType" substitutionGroup="n1:Button">
<xsd:annotation>
<xsd:documentation>The ToggleButton Control is a Button that can be toggled between pressed and normal state</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Token" type="n1:_TokenType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>renders a token containing text and an optional delete icon</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tokenizer" type="n1:_TokenizerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Tokenizer displays multiple tokens</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Toolbar" type="n1:_ToolbarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Toolbar control is a horizontal items container that can be used to get an input from user or just to display output.

Note: By default, when the Toolbar overflows, it provides shrinking for the controls which have percentual width (e.g. Input, Slider) or implement the {@link sap.ui.core.IShrinkable} interface (e.g. Text, Label). This behaviour can be overwritten by providing {@link sap.m.ToolbarLayoutData} for the toolbar items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarLayoutData" type="n1:_ToolbarLayoutDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for the toolbar items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarSeparator" type="n1:_ToolbarSeparatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarSpacer" type="n1:_ToolbarSpacerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control can be used to add horizontal space between toolbar items.
Note: ToolbarLayoutData should not be used with this control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollection" type="n1:_UploadCollectionType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control allows users to upload single or multiple files from their device (desktop PC, tablet or phone) and attach them into the application.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollectionItem" type="n1:_UploadCollectionItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Items provide information about the uploaded files.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UploadCollectionParameter" type="n1:_UploadCollectionParameterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a parameter for the UploadCollection.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VBox" type="n1:_VBoxType" substitutionGroup="n1:FlexBox">
<xsd:annotation>
<xsd:documentation>The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.

Browser support:
This control is not supported in Internet Explorer 9!</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsCustomItem" type="n1:_ViewSettingsCustomItemType" substitutionGroup="n1:ViewSettingsItem">
<xsd:annotation>
<xsd:documentation>ViewSettingsCustomItem is used for modelling custom filters in the ViewSettingsDialog.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsDialog" type="n1:_ViewSettingsDialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ViewSettingsDialog provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respecive associations. If only one assication is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsFilterItem" type="n1:_ViewSettingsFilterItemType" substitutionGroup="n1:ViewSettingsItem">
<xsd:annotation>
<xsd:documentation>A ViewSettingsFilterItem is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ViewSettingsItem" type="n1:_ViewSettingsItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.m.ActionListItem'-->
<xsd:complexType name="_ActionListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text of the action list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ActionSelect'-->
<xsd:complexType name="_ActionSelectType">
<xsd:complexContent>
<xsd:extension base="n1:_SelectType">
<xsd:attribute name="buttons" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Buttons to be added to the ActionSelect content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ActionSheet'-->
<xsd:complexType name="_ActionSheetType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCancelButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the ActionSheet is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the ActionSheet is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the ActionSheet is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the ActionSheet is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.App'-->
<xsd:complexType name="_AppType">
<xsd:complexContent>
<xsd:extension base="n1:_NavContainerType">
<xsd:attribute name="homeIcon" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".

Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.

This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.

A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
This can be used to make the application content better readable by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientationChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the orientation (portrait/landscape) of the device is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Bar'-->
<xsd:complexType name="_BarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="contentLeft" minOccurs="0">
<xsd:annotation>
<xsd:documentation>this is the left content area, usually containing a button or an app icon. If this is overlapped by the right content, its content will disappear and text will show an elipsis.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="contentMiddle" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This is the middle content area. Controls such as label, segmented buttons or select should be placed here. Content that is placed here will be centrally positioned, if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="contentRight" minOccurs="0">
<xsd:annotation>
<xsd:documentation>this is the right content area. Controls such as action buttons or search field could be placed here.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enableFlexBox" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="translucent" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A boolean value indicating whether the bar is partially translucent.
It is only applied for touch devices.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_BarDesignType">
<xsd:annotation>
<xsd:documentation>The design of the bar. If set to auto it is dependent on the place, where the bar is placed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.BusyDialog'-->
<xsd:complexType name="_BusyDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional text shown inside the popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets a title to the busy dialog. Default is no title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconRotationSpeed" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.

By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancelButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text of the cancel button. The default text is "Cancel" (translated to the respective language).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCancelButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A cancel button will be rendered inside the busy dialog if this property is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the busy dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.BusyIndicator'-->
<xsd:complexType name="_BusyIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the busy indicator (optional)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to false to make the control invisible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon URL if an icon is used as the busy indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconRotationSpeed" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.

By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIconHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the provided icon. By default 44px are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the size of the busy indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The design defines how the BusyIndicator should look like. There are 3 possibilities:
auto: automatically sets the design according to the context
dark: dark theme, useful within a light context
light: light theme, useful within a dark context</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Button'-->
<xsd:complexType name="_ButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_ButtonTypeType">
<xsd:annotation>
<xsd:documentation>Type of a button (e.g. Default, Accept, Reject, Back, etc.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true (default), the display sequence is 1. icon 2. control text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user taps the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Carousel'-->
<xsd:complexType name="_CarouselType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'pages'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="pages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content which the carousel displays.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="loop" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showPageIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show or hide carousel's page indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageIndicatorPlacement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showBusyIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show or hide busy indicator in the carousel when loading pages after swipe.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="busyIndicatorSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Size of the busy indicators which can be displayed in the carousel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activePage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
The getter will return the control id</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="loadPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Carousel requires a new page to be loaded. This event may be used to fill the content of that page</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unloadPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CheckBox'-->
<xsd:complexType name="_CheckBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Contains the state of the control whether it is flagged with a check mark, or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using this property, the control could be disabled, if required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the check box</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of Label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeHandling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user shall be allowed to select the check box</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Column'-->
<xsd:complexType name="_ColumnType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'header'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="header" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control to be displayed in the column header.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control to be displayed in the column footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the column. If you leave it empty then this column covers the remaining space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".

NOTE: Control with a "textAlign" property inherits the horizontal alignment.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vAlign" type="n0:_VerticalAlignType">
<xsd:annotation>
<xsd:documentation>Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
This property does not affect the vertical alignment of header and footer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="styleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether or not the column is visible. Invisible columns are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minScreenWidth" type="xsd:string">
<xsd:annotation>
<xsd:documentation>By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).

sap.m.Column.MediaQuery1-&gt;Range1 = 199

This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
Please also see "demandPopin" property</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="demandPopin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>According to your minScreenWidth settings, the column can be hidden in different screen sizes.
Setting this property to true, shows this column as pop-in instead of hiding it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="popinHAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".

NOTE: Controls with a text align do not inherit the horizontal alignment.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="popinDisplay" type="n1:_PopinDisplayType">
<xsd:annotation>
<xsd:documentation>Defines the display options of pop-in.
Possible values are
1 - "Block"(Header is displayed in first line and value field in next line.)
2 - "Inline" (Value field is displayed next to the header in same line.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mergeDuplicates" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set "true" to merge repeating cells(duplicates) into one.
Also see "mergeFunctionName" property to customize.
Note: this property gets disabled if any column is in pop-in!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mergeFunctionName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
Control itself uses this function to compare values of two repeating cells.
Default value "getText" is suitable for Label and Text control.
e.g. For "Icon" control "getSrc" can be used.
Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ColumnListItem'-->
<xsd:complexType name="_ColumnListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'cells'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="cells" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Every item inside the cells aggregation defines one column of the row.
The order of the cells aggregation must match the order of the columns aggregation of the Table.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="vAlign" type="n0:_VerticalAlignType">
<xsd:annotation>
<xsd:documentation>Sets the vertical alignment of the all cells in a table row(including selection and navigation). Possible values are "Inherit", "Top", "Middle", "Bottom"
Note: Column's "vAlign" property is stronger than this one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ComboBox'-->
<xsd:complexType name="_ComboBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_ComboBoxBaseType">
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item. If the key has no corresponding item, no changes will apply. If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifier of the selected item. If the identifier has no corresponding item, no changes will apply.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Occurs when the user changes the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ComboBoxBase'-->
<xsd:complexType name="_ComboBoxBaseType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items to be displayed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the maximum width of the text field. This value can be provided in %, em, px… and all CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CustomListItem'-->
<xsd:complexType name="_CustomListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of this list item</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.CustomTile'-->
<xsd:complexType name="_CustomTileType">
<xsd:complexContent>
<xsd:extension base="n1:_TileType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines the Content of the CustomTile</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DatePicker'-->
<xsd:complexType name="_DatePickerType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Displays date value in this given format in text field. Default value is taken from locale settings.
If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
You can set and get value in this format.
If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
If this property is used, the value property should not be changed from the caller.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DateRangeSelection'-->
<xsd:complexType name="_DateRangeSelectionType">
<xsd:complexContent>
<xsd:extension base="n1:_DatePickerType">
<xsd:attribute name="delimiter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Delimiter of starting and ending date. Default value is "-".
If no delimiter is given the one defined for the used locale is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondDateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Ending date of the range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="from" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Starting date of the range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="to" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Ending date of the range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event thrown in case of change of date range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DateTimeInput'-->
<xsd:complexType name="_DateTimeInputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="type" type="n1:_DateTimeInputTypeType">
<xsd:annotation>
<xsd:documentation>Type of DateTimeInput (e.g. Date, Time, DateTime)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Displays date value in this given format in text field. Default value is taken from locale settings.
If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
If user browser supports native picker then this property is overwritten by browser with locale settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
You can only set and get value in this format.
If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event gets fired when the selection has finished and the value has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Dialog'-->
<xsd:complexType name="_DialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content inside the dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The button which is rendered to the left side (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the endButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the endButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The button which is rendered to the right side (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Buttons can be added to the footer area of dialog through this aggregation. When this aggregation is set, any change to beginButton and endButton has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the dialog header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property decides whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_DialogTypeType">
<xsd:annotation>
<xsd:documentation>The type of the dialog. In theme sap_bluecrystal, the type message will limit the dialog's width within 480px when runs on tablet and desktop.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>State affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretchOnPhone" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When it's set to true, the dialog will be full screen when it runs on a phone.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When this property is set to true, the dialog is stretched to a full screen display. This property is only applicable to standard dialog and message type dialog ignores this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width when runs on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll vertically inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="leftButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rightButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.DisplayListItem'-->
<xsd:complexType name="_DisplayListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>List item label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>List item value</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the value text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilter'-->
<xsd:complexType name="_FacetFilterType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'lists'-->
<xsd:element ref="n1:FacetFilterList" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="lists" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Collection of FacetFilterList controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FacetFilterList" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showPersonalization" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true and the FacetFilter type is Simple, then the add facet icon will be displayed and each facet button will also have a facet remove icon displayed beside it allowing the user to deactivate the facet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_FacetFilterTypeType">
<xsd:annotation>
<xsd:documentation>This property defines the default appearance of the FacetFilter on the device.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enable/disable live search on all search fields except for the facet list search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSummaryBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows the summary bar instead of the facet filter buttons bar when set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showReset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show or hide the filter reset button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showPopoverOKButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true an "OK" button is shown for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside the popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the reset button is pressed to inform that all facet filter lists need to be reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilterItem'-->
<xsd:complexType name="_FacetFilterItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used as input for subsequent actions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="count" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of objects that match this item in the target data set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FacetFilterList'-->
<xsd:complexType name="_FacetFilterListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to Simple. It is also displayed as a list item in the facet page of the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wordWrap" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, item text wraps when it is too long.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether multiple or single selection is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the list is displayed as a button when the FacetFilter type is set to Simple.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableCaseInsensitiveSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, enable case-insensitive search for OData .</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="allCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of objects that match this item in the target data set when all filter items are selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sequence" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sequence that determines the order in which facet list is shown on the facet filter. Lists are rendered by ascending order of sequence.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier for this filter list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRemoveFacetIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether remove icon for facet is visible or hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="retainListSequence" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Property to retain the list sequence if it is inactive and made active again .</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataType" type="n1:_FacetFilterListDataTypeType">
<xsd:annotation>
<xsd:documentation>FacetFilterList data type. Only String data type will provide search function.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired before the filter list is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Triggered after the list of items is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FeedInput'-->
<xsd:complexType name="_FeedInputType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set this flag to "false" to disable both text input and post button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The placeholder text shown in the input area as long as the user has not entered any text value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text value of the feed input. As long as the user has not entered any text the post butoon is disabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.

If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.

Please be aware that this property is relevant only for images and not for icons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets a new tooltip for submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this Element)
or an instance of sap.ui.core.TooltipBase.
If a new tooltip is set, any previously set tooltip is deactivated.
The default value is set language dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="post" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The post event is triggered when the user has entered a value and pressed the post button. After firing this event the value is reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FeedListItem'-->
<xsd:complexType name="_FeedListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
Icon is only shown if showIcon = true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon displayed when the list item is active.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sender" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sender of the chunk</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The FeedListItem text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The Info text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="timestamp" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This chunks timestamp</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="senderActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true" (default), icons will be displayed, if set to false icons are hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxCharacters" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="senderPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when name of the sender is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the icon is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FlexBox'-->
<xsd:complexType name="_FlexBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Flex items within the FlexBox layout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayInline" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the flexbox is in block or inline mode</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="direction" type="n1:_FlexDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the layout of child elements</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fitContainer" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="renderType" type="n1:_FlexRendertypeType">
<xsd:annotation>
<xsd:documentation>Determines whether the layout is rendered as a series of divs or as an unordered list (ul)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="justifyContent" type="n1:_FlexJustifyContentType">
<xsd:annotation>
<xsd:documentation>Determines the layout behavior along the main axis. "SpaceAround" is currently not supported in most non-Webkit browsers.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alignItems" type="n1:_FlexAlignItemsType">
<xsd:annotation>
<xsd:documentation>Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer &lt;10.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.FlexItemData'-->
<xsd:complexType name="_FlexItemDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="alignSelf" type="n1:_FlexAlignSelfType">
<xsd:annotation>
<xsd:documentation>Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="order" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines the display order of flex items independent of their source code order.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growFactor" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Determines the flexibility of the flex item when allocatable space is remaining.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shrinkFactor" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.

http://www.w3.org/TR/css3-flexbox/#flex-shrink-factor

This property is not supported in Internet Explorer 9, Android Native Browser/Webview &lt;4.4, and Safari &lt;7.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="styleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The style class will be applied to the flex item and can be used for CSS selectors</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.GroupHeaderListItem'-->
<xsd:complexType name="_GroupHeaderListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title of the group header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="count" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
Will not be displayed if not set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="upperCase" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Title will be put to capital letters by default, otherwise set this property to 'false'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.GrowingList'-->
<xsd:complexType name="_GrowingListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListType">
<xsd:attribute name="threshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of items requested from the server. To activate this you should set growing property to "true"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="triggerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
This property can be used only if growing property is set "true" and scrollToLoad property is set "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollToLoad" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.HBox'-->
<xsd:complexType name="_HBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_FlexBoxType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabBar'-->
<xsd:complexType name="_IconTabBarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items displayed in the IconTabBar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The contents displayed below the IconTabBar.
If there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the current selection should be visualized</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if the tabs can be collapsed and expanded</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the actual tab is expanded or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="upperCase" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the text of the icon tab filter (not the count) is uppercased.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stretchContentHeight" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container. As a
prerequisite, the height of the parent container must be defined as a fixed value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="applyContentPadding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the IconTabBar content will fit to the full area (if set to false paddings are removed).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of the IconTabBar. Depending on the theme you can change the state of the background
from "Solid" over "Translucent" to "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when an item is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expand" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates that the tab will expand or collapse</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabFilter'-->
<xsd:complexType name="_IconTabFilterType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to show for this item (optional).
If this content is set, it will be displayed instead of the general content inside the IconTabBar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="count" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The number of available items if this filter is applied</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showAll" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables special visualization for disabled filter (show all items)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The icon to display for this item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconColor" type="n0:_IconColorType">
<xsd:annotation>
<xsd:documentation>If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
Possible semantic colors are: Neutral, Positive, Critical, Negative.
Instead of the semantic icon color the brand color can be used, this is named Default.
Semantic colors and brand colors should not be mixed up inside one IconTabBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to false, the control is not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_IconTabFilterDesignType">
<xsd:annotation>
<xsd:documentation>Design for the filter item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabHeader'-->
<xsd:complexType name="_IconTabHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items displayed in the IconTabBar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the current selection should be visualized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible controls are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when an item is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.IconTabSeparator'-->
<xsd:complexType name="_IconTabSeparatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The icon to display for this separator. If no icon is given, a separator line will be used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Image'-->
<xsd:complexType name="_ImageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="src" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="decorative" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A decorative image is included for design reasons. Accessibility tools will ignore decorative images.

Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alt" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The alternative text that is displayed in case the Image is not available, or cannot be displayed.
If the image is set to decorative this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useMap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the image map that defines the clickable areas</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="densityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.

By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeSrc" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The source property when this image is tapped.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Input'-->
<xsd:complexType name="_InputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:sequence>
<!--default aggregation 'suggestionItems'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="suggestionItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup. o display suggestions with two text values, it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected ListItem, only the first value is returned to the input field.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="suggestionColumns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="suggestionRows" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
The items of this aggregation are to be bound directly or to set in the suggest event method.
Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="type" type="n1:_InputTypeType">
<xsd:annotation>
<xsd:documentation>Type of input (e.g. Text, Number, Email, Phone). This is the HTML type for the "input" tag. It is supported
by browsers natively. Touch devices open various soft keyboard layouts depending on the given input type.
However, only the default value &lt;code&gt;sap.m.InputType.Text&lt;/code&gt; may be used in combination with data model formats.
&lt;code&gt;sap.ui.model&lt;/code&gt; defines extended formats that are mostly incompatible with normal HTML
representations for numbers and dates.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dateFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Only used if type=date and no datepicker is available.
The data is displayed and the user input is parsed according to this format.
NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSuggestion" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueHelpOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterSuggests" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether to filter the provided suggestions before showing them to the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSuggestionWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startSuggestion" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTableSuggestionValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.

NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description is a text after the input field, e.g. units of measurement, currencies.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueLiveUpdate" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the input is changed - e.g. at each keypress</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueHelpRequest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>When the value help indicator is clicked, this event will be fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggestionItemSelected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.InputBase'-->
<xsd:complexType name="_InputBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value of the input.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the input.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can change the input value (default is true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The "name" property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text shown when no value available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls if a user can change the value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueStateMessage" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event gets fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.InputListItem'-->
<xsd:complexType name="_InputListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content controls can be added</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label of the list item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Label'-->
<xsd:complexType name="_LabelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="design" type="n1:_LabelDesignType">
<xsd:annotation>
<xsd:documentation>set design of a label to either Standard or Bold</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label Text to be displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of Label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="required" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that user input is required in the input this label labels.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelFor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to the labeled control.
By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Link'-->
<xsd:complexType name="_LinkType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Link text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the link can be triggered by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used for href URLs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the link text is allowed to wrap when there is not sufficient space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="subtle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other usecase.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emphasized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set this property to true if the link should appear emphasized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user triggers the link control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.List'-->
<xsd:complexType name="_ListType">
<xsd:complexContent>
<xsd:extension base="n1:_ListBaseType">
<xsd:sequence>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Columns</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of the list. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ListBase'-->
<xsd:complexType name="_ListBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items of this list or rows of the table.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="swipeContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>User can swipe to bring in this control on the right hand side of a list item.
Note: This functionality gets disabled for non-touch devices.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Header can be used as a Toolbar to add extra controls for user interactions.
Note: This aggregation overwrites "headerText" property.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="infoToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>InfoBar is placed below the header and can be used to show extra information to the user.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="inset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Inset style false/true</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The header text appearing in the list/table header.
Note: if "headerToolbar" aggregation is set, then this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerDesign" type="n1:_ListHeaderDesignType">
<xsd:annotation>
<xsd:documentation>List header style. Possible vales are "Standard" and "Plain"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="footerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Footer Text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_ListModeType">
<xsd:annotation>
<xsd:documentation>Mode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="includeItemInSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property decides if the list item interacts with the selection. If it is "true", a tap on the item will set the selection control in front of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showUnread" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Activates the unread feature for all items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This text is displayed when the control has no data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNoData" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables an information text(see "noDataText" property) when the control has no data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableBusyIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When this property is set to "true", the List/Table will automatically display a BusyIndicator when it detects that data is being loaded or filtered. This BusyIndicator blocks the interaction with the items until data loading is finished.
For the List/Table controls BusyIndicator will be shown after one second. This behavior can be customized by setting the "busyIndicatorDelay" property.
When this property is set to "false", items will stay on the List/Table until data loading is finished.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modeAnimationOn" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if animations will be shown when activating or deactivating selection modes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSeparators" type="n1:_ListSeparatorsType">
<xsd:annotation>
<xsd:documentation>Defines which separator style will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="swipeDirection" type="n1:_SwipeDirectionType">
<xsd:annotation>
<xsd:documentation>Direction of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the growing(paging) feature of control.
Note: This feature only works with item binding and should not be used with two way binding!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of items requested from the server. To activate this you should set "growing" property to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingTriggerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text ("More") coming from the message bundle.
This property can be used only if "growing" property is set "true"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingScrollToLoad" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.
This property can be used only if "growing" property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, if you have binding then the control remembers selections after binding update(sorting, filter, refresh). If this is not a desired behavior for your use case, you can switch this off with setting it to "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection is changed via user interaction inside the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="delete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when delete icon is pressed by user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="swipe" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingStarted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is called when "growing" feature is enabled and before new page loaded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingFinished" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is called when "growing" feature is enabled and after new page loaded and DOM updated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateStarted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is called before items binding is updated.
Note: Event handler should not invalidate the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateFinished" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is called after items binding and afterwards related DOM is updated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is called when an item is pressed regardless of the selection mode.
NOTE: This event is fired for all kind of list items unless the item's type is "Inactive".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ListItemBase'-->
<xsd:complexType name="_ListItemBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="type" type="n1:_ListTypeType">
<xsd:annotation>
<xsd:documentation>Type of the list item, defines the behaviour</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible list items are not rendered</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unread" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property defines the select state of the list item when using Single/Multi-Selection.

Note: Binding the "selected" property in single selection mode, may cause unwanted results, if you have more than one selected item in your binding</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="counter" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Property sets a counter bubble with the integer given.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user taps on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user taps on the detail button of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.

Note: When the parent mode is SingleSelectMaster or includeItemInSelection is true then this event is not fired but the parent fires a selectionChange event instead.
Also if there is an interactive element that handles the press event then the list item's press is not fired.

If mode detection is not necessary for the press event then the itemPress event of the parent can be used. 
{@link sap.m.ListBase#attachItemPress}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the detail button of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePage'-->
<xsd:complexType name="_MessagePageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="customText" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom Text control of this page.
Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
"text" and "textDirection" setters can be used for this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customDescription" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom description control of this page.
Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
"description" and "textDirection" setters can be used for this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Link" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>MessagePage text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>MessagePage description</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>MessagePage title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header of the MessagePage is rendered when it's embedded in another page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNavButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A nav button will be rendered in the header if this property is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>MessagePage main icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>this event is fired when Nav Button is pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePopover'-->
<xsd:complexType name="_MessagePopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:MessagePopoverItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list with error items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MessagePopoverItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_VerticalPlacementTypeType">
<xsd:annotation>
<xsd:documentation>Determines the position, where the control will appear on the screen. Possible values are: Top, Bottom and Vertical. The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will be applied with the next interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initiallyExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the initial state of the control – expanded or collapsed. By default the control opens as expanded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when description is shown</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when one of the lists is shown when (not) filtered  by type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MessagePopoverItem'-->
<xsd:complexType name="_MessagePopoverItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="type" type="n0:_MessageTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the title of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies detailed description of the message</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MultiComboBox'-->
<xsd:complexType name="_MultiComboBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_ComboBoxBaseType">
<xsd:attribute name="selectedKeys" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItems" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides getter and setter for the selected items from
the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection of an item is changed.
Note: please do not use the "change" event inherited from sap.m.InputBase</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionFinish" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when user has finished a selection of items in a list box and list box has been closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.MultiInput'-->
<xsd:complexType name="_MultiInputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputType">
<xsd:sequence>
<xsd:element name="tokens" minOccurs="0">
<xsd:annotation>
<xsd:documentation>the currently displayed tokens</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enableMultiLineMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the MultiInput will be displayed in multi-line display mode. 
In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
The default value is false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>fired when the tokens aggregation changed (add / remove token)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.NavContainer'-->
<xsd:complexType name="_NavContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'pages'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="pages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the NavContainer is visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
This value should be set initially and not set/modified while the application is running.

This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectAttribute'-->
<xsd:complexType name="_ObjectAttributeType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object attribute title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object attribute text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the object attribute text is selectable by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks active text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectHeader'-->
<xsd:complexType name="_ObjectHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'attributes'-->
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="attributes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of Object Attributes</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="firstStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>First status shown on the right side of the attributes above the second status.
If it is not set the first attribute will expand to take the entire row.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Second status shown on the right side of the attributes below the first status.
If it is not set the second attribute will expand to take the entire row.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="statuses" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This aggregation takes only effect when you set "responsive" to true.
This is an association for the end area of the object header. It can either be filled with an sap.m.IconTabBar or a sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header number field</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object header number units qualifier.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intro" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Introductory text for the object header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the intro is clickable</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the title is clickable</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Object header icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the object header icon is clickable</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFavorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the favorite state to true or false. The showMarkers property must be true for this property to take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFlagged" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the flagged state to true or false. The showMarkers property must be true for this property to take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMarkers" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if object header supports showing markers such as flagged and favorite.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTitleSelector" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When it is true, the selector arrow icon/image is shown and can be pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Object header number and numberUnit value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="condensed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Displays the condensed object header with title, one attribute, number and number unit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>NOTE: Only applied if you set "condensed=true" or "responsive=true".
This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="responsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fullScreenOptimized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>NOTE: Only applied if you set "responsive=true".
If this property is set to true, the control occupies the available screen area so that the contents are arranged in a different way to fit in that area.
If it is set to false, the control is optimized for the master detail view.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleHref" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The title link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "titlePress" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTarget" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introHref" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "introPress" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTarget" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the number and unit directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titlePress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title is active and the user tap/click on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title is active and the user tap/click on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title icon is active and the user tap/click on it</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleSelectorPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the object header title selector (down-arrow) is pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectIdentifier'-->
<xsd:complexType name="_ObjectIdentifierType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgeNotes" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the notes icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgePeople" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the address book icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="badgeAttachments" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether or not the attachments icon is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the object identifier is visible. An invisible object identifier is not being rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleActive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the object identifier's title is clickable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titlePress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the title is active and the user taps/clicks on it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectListItem'-->
<xsd:complexType name="_ObjectListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:sequence>
<!--default aggregation 'attributes'-->
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="attributes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of attributes displayed below the title to the left of the status fields.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectAttribute" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="firstStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>First status text field shown on the right side of the attributes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Second status text field shown on the right side of the attributes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ObjectStatus" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object list item title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object list item number</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The number units qualifier of the object list item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intro" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Introductory text for the object list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Object list item icon displayed to the left of the title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon displayed when the object list item is active.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFavorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the favorite state for the object list item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markFlagged" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the flagged state for the object list item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMarkers" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true if the object list item can be marked with icons such as favorite and flag.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Object list item number and numberUnit value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item title.
Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
By default the item title inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="introTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item intro.
Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
By default the item intro inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the text direction of the item number.
Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
By default the item number inherits the text direction from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markLocked" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the locked state of the object list item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectNumber'-->
<xsd:complexType name="_ObjectNumberType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Number field of the object number</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Number units qualifier</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emphasized" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the object number should appear emphasized</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>The object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Number units qualifier. If numberUnit and unit are both set, the unit value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options for the number and unit text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the number and unit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ObjectStatus'-->
<xsd:complexType name="_ObjectStatusType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object status title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The object status text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Text value state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon URI. This may be either an icon font or image path.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.OverflowToolbar'-->
<xsd:complexType name="_OverflowToolbarType">
<xsd:complexContent>
<xsd:extension base="n1:_ToolbarType">
<xsd:sequence/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.OverflowToolbarLayoutData'-->
<xsd:complexType name="_OverflowToolbarLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n1:_ToolbarLayoutDataType">
<xsd:attribute name="moveToOverflow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The toolbar item can/cannot move to the action sheet</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stayInOverflow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The toolbar item can/cannot stay in the action sheet</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nColumnsItem'-->
<xsd:complexType name="_P13nColumnsItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the unique table column key</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property contains the index of a table column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property decides whether a P13nColumnsItem is visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the with of a table column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nColumnsPanel'-->
<xsd:complexType name="_P13nColumnsPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="columnsItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>list of columns that has been changed</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nColumnsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visibleItemsThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property is used to specify a threshold of visible items</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addColumnsItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when a columnsItem shall be added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="changeColumnsItems" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when columnsItems shall be changed or new one needs to be created in model</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="setData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when setData on model should be called; this event serves the purpose of minimizing such calls since these can be very
performance expensive</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nConditionPanel'-->
<xsd:complexType name="_P13nConditionPanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="maxConditions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>defines the max number of conditions on the ConditionPanel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="exclude" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>exclude options for filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When
the P13nConditionPanel is used on a dialog the property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoAddNewRow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>adds initial a new empty condition row</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="disableFirstRemoveIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>makes the remove icon on the first condition row disabled when only one condition
exist.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alwaysShowAddIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>makes the Add icon visible on each condition row. If is set to false the Add is only
visible at the end and you can only append a new condition.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="usePrevConditionSetting" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>new added condition use the settings from the previous condition as default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoReduceKeyFieldItems" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>KeyField value can only be selected once. When you set the property to true the
ConditionPanel will automatically offers on the KeyField drop down only the keyFields
which are not used. The default behavior is that in each keyField dropdown all
keyfields are listed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically
change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>show additional labels in the condition</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This represents the displayFormat of the condition Values.
With the value "UpperCase" the entered value of the condition will be converted to upperCase.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Workaround for updating the binding</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nDialog'-->
<xsd:complexType name="_P13nDialogType">
<xsd:complexContent>
<xsd:extension base="n1:_DialogType">
<xsd:sequence>
<xsd:element name="panels" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The dialog panels displayed in the dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nPanel" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialVisiblePanelType" type="n1:_P13nPanelTypeType">
<xsd:annotation>
<xsd:documentation>This property determines which panel is initially shown when dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showReset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property determines whether the 'Reset' button is shown inside the dialog. If this property is set to true, clicking the
'Reset' button will trigger the 'reset' event sending a notification that model data must be reset.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ok" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'ok' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'cancel' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired if the 'reset' button in P13nDialog is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nFilterItem'-->
<xsd:complexType name="_P13nFilterItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>value of the filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value2" type="xsd:string">
<xsd:annotation>
<xsd:documentation>to value of the between filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="exclude" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the filter is an include or exclude filter item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nFilterPanel'-->
<xsd:complexType name="_P13nFilterPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>defined Filter Items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nFilterItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxIncludes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>defines the max number of include filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxExcludes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>defines the max number of exclude filter</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When
the ConditionPanel is used on a dialog the property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically
change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when a filterItem was added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>remove a filter item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>update a filter item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nGroupItem'-->
<xsd:complexType name="_P13nGroupItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIfGrouped" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>make the grouped column as normalcolumn visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nGroupPanel'-->
<xsd:complexType name="_P13nGroupPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="groupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>defined group Items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nGroupItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxGroups" type="xsd:string">
<xsd:annotation>
<xsd:documentation>defines the max number of groups.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When the
ConditionPanel is used on a dialog the property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically change the
layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when a GroupItem was added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>remove a group item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>update a group item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nItem'-->
<xsd:complexType name="_P13nItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used as input for subsequent actions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>data type of the column (text, numeric or date is supported)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="precision" type="xsd:string">
<xsd:annotation>
<xsd:documentation>if type==numeric the precision will be used to format the entered value (maxIntegerDigits  of the used Formatter)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scale" type="xsd:string">
<xsd:annotation>
<xsd:documentation>if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:string">
<xsd:annotation>
<xsd:documentation>specifies the number of characters which can be entered in the value fields of the condition panel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>tbd</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isDefault" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>the column with isDefault==true will be used as the selected column item on the conditionPanel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nPanel'-->
<xsd:complexType name="_P13nPanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:P13nItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the panel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_P13nPanelTypeType">
<xsd:annotation>
<xsd:documentation>Panel type for generic use</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>makes the vertical Scrolling on the P13nDialog enabled when the panel is shown</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeNavigationTo" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nSortItem'-->
<xsd:complexType name="_P13nSortItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="operation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sap.m.P13nConditionOperation</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>key of the column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.P13nSortPanel'-->
<xsd:complexType name="_P13nSortPanelType">
<xsd:complexContent>
<xsd:extension base="n1:_P13nPanelType">
<xsd:sequence>
<xsd:element name="sortItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>defined Sort Items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:P13nSortItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>defines if the mediaQuery or a ContainerResize will be used for layout update. When the
ConditionPanel is used on a dialog the property should be set to true!</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>can be used to control the layout behavior. Default is "" which will automatically change the
layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="addSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>event raised when a SortItem was added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="removeSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>remove a sort item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>update a sort item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Page'-->
<xsd:complexType name="_PageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of this page</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) custom header of this page.
Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The (optional) footer of this page. It is always located at the bottom of the page</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>a subHeader will be rendered directly under the header</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
When a customHeader is used, this aggregation will be ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title text appearing in the page header bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLevel" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the semantic level of the title. Using 'Auto' no explicit level information is written.
Used for accessibility purposes only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNavButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A nav button will be rendered on the left area of header bar if this property is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall have a header.
If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSubHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall show the subheader.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
If set to false, there will be no scrolling at all.

The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_PageBackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonType" type="n1:_ButtonTypeType">
<xsd:annotation>
<xsd:documentation>This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to "Default".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFooter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether this page shall have a footer</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonTap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>this event is fired when Nav Button is tapped</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navButtonPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>this event is fired when Nav Button is pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Panel'-->
<xsd:complexType name="_PanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content for the Panel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Header can be used as a Toolbar to add extra controls for user interactions.
Note: This aggregation overwrites "headerText" property.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="infoToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>InfoBar is placed below the header and can be used to show extra information to the user.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Toolbar" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="headerText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the header text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The Panel width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The Panel height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the control is expandable.
If expandable is set to false, the expanded property is always set to true, if expandable is set to false, then the expanded property can be set either true or false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the state of the sap.m.Panel is expanded or not, if the expandable property is set to true.
If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
If expanded is set to false, then only the headerText/headerToolbar is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandAnimation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the transition between the expanded and the hidden state of the control is animated.
By default the animation is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expand" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates that the panel will expand or collapse</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Popover'-->
<xsd:complexType name="_PopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content inside the popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This is optional footer which is shown on the bottom of the popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal, sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If a header should be shown at the top of the popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title text appears in the header. This property will be ignored when showHeader is set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetX" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The offset for the popover placement in the x axis. It's with unit pixel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetY" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The offset for the popover placement in the y axis. It's with unit pixel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="bounce" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether bouncing is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="leftButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rightButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired after the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired before the popover is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ProgressIndicator'-->
<xsd:complexType name="_ProgressIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches enabled state of the control. Disabled fields have different colors, and can not be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="state" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>The state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text value to be displayed in the bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="percentValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The numerical value for the displayed length of the progress bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the current value shall be rendered inside the bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.PullToRefresh'-->
<xsd:complexType name="_PullToRefreshType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional description. May be used to inform a user, for example, when the list has been updated last time.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="refresh" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event indicates that the user has requested new data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RadioButton'-->
<xsd:complexType name="_RadioButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled controls are displayed in another color.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies the select state of the radio button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the radio button group the current radio button belongs to. You can define a new name for the group.
If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the RadioButton</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of Label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeHandling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>this is a flag to switch on activeHandling, when it is switched off,
there will not be visual changes on active state. Default value is 'true'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can select the radio button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the user makes a change on the radio button (selecting or unselecting it).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RadioButtonGroup'-->
<xsd:complexType name="_RadioButtonGroupType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'buttons'-->
<xsd:element ref="n1:RadioButton" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>returns a list of the RadioButtons in a RadioButtonGroup</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:RadioButton" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the RadioButtonGroup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columns" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of RadioButtons displayed in one line/column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can select the RadioButtonGroup. When the property is set to false, the control obtains visual styles different from its visual styles for the normal and the disabled state. Additionally the control is no longer interactive, but can receive focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>The value state to be displayed. Setting this attribute, when the accessibility feature is enabled, sets the value of the invalid property to “true”.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedIndex" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Index of the selected/checked RadioButton.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection is changed by user interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.RatingIndicator'-->
<xsd:complexType name="_RatingIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxValue" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of displayed rating symbols</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The indicated value of the rating</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSelected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconUnselected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHovered" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visualMode" type="n1:_RatingIndicatorVisualModeType">
<xsd:annotation>
<xsd:documentation>Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user has done a rating.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered during the dragging period, each time the rating value changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ResponsivePopover'-->
<xsd:complexType name="_ResponsivePopoverType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#content sap.m.Popover} and {@linkcode sap.m.Dialog#content sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>CustomHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#customHeader sap.m.Popover} and {@linkcode sap.m.Dialog#customHeader sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="subHeader" minOccurs="0">
<xsd:annotation>
<xsd:documentation>SubHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#subHeader sap.m.Popover} and {@linkcode sap.m.Dialog#subHeader sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="beginButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="placement" type="n1:_PlacementTypeType">
<xsd:annotation>
<xsd:documentation>This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#placement here}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#showHeader sap.m.Popover} and {@linkcode sap.m.Dialog#showHeader sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#title sap.m.Popover} and {@linkcode sap.m.Dialog#title sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>This property only takes effect when runs on phone. Please see the documentation {@linkcode sap.m.Dialog#icon here}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#modal here}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetX" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetX here}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="offsetY" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetY here}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentWidth sap.m.Popover} and {@linkcode sap.m.Dialog#contentWidth sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentHeight sap.m.Popover} and {@linkcode sap.m.Dialog#contentHeight sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#horizontalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#horizontalScrolling sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#verticalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#verticalScrolling sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCloseButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether a close button should be inserted to the dialog's header dynamically to close the dialog. This property only takes effect when runs on the phone.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before popover or dialog is open.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after popover or dialog is open.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before popover or dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after popover or dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ScrollContainer'-->
<xsd:complexType name="_ScrollContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the ScrollContainer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the ScrollContainer.
If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the ScrollContainer.
By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.

Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether horizontal scrolling should be possible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vertical" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether vertical scrolling should be possible.

Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
Important: it is not supported to have nested controls that both enable scrolling into the same dimension.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="focusable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the scroll container can be focused.

Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction  requires an additional tab stop on the container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SearchField'-->
<xsd:complexType name="_SearchFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Input Value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the CSS width of the input. If not set, width is 100%.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible inputs are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMagnifier" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to false to hide the magnifier icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRefreshButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="refreshButtonTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSearchButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to true to show the search button with the magnifier icon.
If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectOnFocus" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event which is fired when the user triggers a search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SegmentedButton'-->
<xsd:complexType name="_SegmentedButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'buttons'-->
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface for the buttons displayed by the control. Only the properties "id", "icon", "text", "enabled" and "textDirections" of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively, you can use the "createButton" method to add buttons.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control.
The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:SegmentedButtonItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Set the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If disabled all buttons look grey, you cannot focus on them, you can not even click on them.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item. If no item to this key is found in the aggregation "items", no changes will apply. Only the "items" aggregation is affected. If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A reference to the currently selected button control. By default or if the association is set to a falsy value (null, undefined, "", false), the first button will be selected.
If the association is set to an invalid value (e.g. an ID of a button that does not exist) the selection on the SegmentedButton will be removed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user selects a button, which returns the id and button object</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SegmentedButtonItem'-->
<xsd:complexType name="_SegmentedButtonItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The icon belonging to the button.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the width of the buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on a individual button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Select'-->
<xsd:complexType name="_SelectType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items of the Item control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can change the selected value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all CSS units.
Note: The width will be ignored if the "autoAdjustWidth" property is set to true.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the maximum width. This value can be provided in %, em, px… and all CSS units</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the icon that will be displayed only when using the “IconOnly” type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_SelectTypeType">
<xsd:annotation>
<xsd:documentation>Type of a select. Possibles values "Default", "IconOnly".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoAdjustWidth" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the width of the select input is determined by the selected item’s content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text within the input field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Specifies the direction of the text within the input field with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Occurs when the user changes the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SelectDialog'-->
<xsd:complexType name="_SelectDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ListItemBase" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title text that appears in the dialog header</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the text shown when the list has no data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If on, the user can select several options from the list</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of items initially displayed in the list</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The content width of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This flag controls whether the dialog clears the selection or not after the confirm event has been fired. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The content height of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the search button has been clicked on the searchfield on the visual control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the value of the search field is changed by a user - e.g. at each key press</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the cancel button is clicked</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SelectList'-->
<xsd:complexType name="_SelectListType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items to be displayed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can change the selection.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control. This value can be provided in all CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the maximum width of the control. This value can be provided in all CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exist, the first item matching the key is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets or retrieves the selected item from the aggregation named items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Occurs when the user changes the selected item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Shell'-->
<xsd:complexType name="_ShellType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'app'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="app" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The application title which may or may not be displayed outside the actual application, depending on the available screen size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logo" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>A logo to be displayed next to the app when the screen is sufficiently large.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLogout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the Logout button should be displayed. This currently only happens on very tall screens (1568px height), otherwise it is always hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerRightText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise it is always hidden.).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appWidthLimited" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the width of the content (the aggregated app) should be limited or extend to the full screen width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="n0:_CSSColorType">
<xsd:annotation>
<xsd:documentation>Background color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.
Any configured background image will be placed above this colored background.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Background image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.
This background image will be placed above any color set for the background.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
This can be used to improve readability of the shell content by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="homeIcon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.

This property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.

Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
The "precomposed" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
{
'phone':'phone-icon_57x57.png',
'phone@2':'phone-retina_114x114.png',
'tablet':'tablet-icon_72x72.png',
'tablet@2':'tablet-retina_144x144.png',
'precomposed':true,
'favicon':'favicon.ico'
}

See jQuery.sap.setIcons() for full documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logout" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the user presses the logout button/link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Slider'-->
<xsd:complexType name="_SliderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the slider, this value can be provided in %, em, px… and all possible CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can change the slider value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="min" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The minimum value of the slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="max" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The maximum value of the slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="step" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Define the amount of units to change the slider when adjusting by drag and drop.

Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).

The step must be positive, if a negative number is provided, the default value will be used instead.
If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="progress" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show a progress bar indicator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Define the value of the slider.

If the value is lower/higher than the allowed minimum/maximum, the value of the properties "min"/"max" are used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered after the end user finishes interacting, if there is any change.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered during the dragging period, each time the slider value changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SplitApp'-->
<xsd:complexType name="_SplitAppType">
<xsd:complexContent>
<xsd:extension base="n1:_SplitContainerType">
<xsd:attribute name="homeIcon" type="n0:_anyType">
<xsd:annotation>
<xsd:documentation>The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".

Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.

This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.

A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientationChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when orientation (portrait/landscape) is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.SplitContainer'-->
<xsd:complexType name="_SplitContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="masterPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="detailPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="defaultTransitionNameDetail" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionNameMaster" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_SplitAppModeType">
<xsd:annotation>
<xsd:documentation>This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterButtonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the text shown in master button which has a default value "Navigation". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.

The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Background color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.
Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundImage" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Background image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.
This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundRepeat" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundOpacity" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
This can be used to make the application content better readable by making the background image partly transparent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialDetail" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial detail page, which is shown on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialMaster" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial master page, which is shown on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="masterButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeMasterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before the master area is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the master area is fully opened after animation if there is.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeMasterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before the master area is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMasterClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the master area is fully closed after the animation when there is.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="detailNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterDetailNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.StandardListItem'-->
<xsd:complexType name="_StandardListItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ListItemBaseType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>List item text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Description gets only visible when the title property is not empty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>List item icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconInset" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>List item active icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Info text shown on the right side of the description.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Info state defines the color of the info text. E.g. Error, Warning, Success...</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="adaptTitleSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without description this results in titles with different sizes. In this cases it can be better to switch the size adaption off with setting this property to "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoTextDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the info text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.StandardTile'-->
<xsd:complexType name="_StandardTileType">
<xsd:complexContent>
<xsd:extension base="n1:_TileType">
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tile title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="info" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tile description</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Tile icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Tile active icon</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Number field</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberUnit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Number units qualifier</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="infoState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Info state defines the color of the info text. E.g. Error, Warning, Success...</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_StandardTileTypeType">
<xsd:annotation>
<xsd:documentation>Tile type.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDensityAware" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Switch'-->
<xsd:complexType name="_SwitchType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="state" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A boolean value indicating whether the switch is on or off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customTextOn" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Custom text for the "ON" state.

"ON" translated to the current language is the default value.
Beware that the given text will be cut off after three characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customTextOff" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Custom text for the "OFF" state.

"OFF" translated to the current language is the default value.
Beware that the given text will be cut off after three characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the switch is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_SwitchTypeType">
<xsd:annotation>
<xsd:documentation>Type of a Switch. Possibles values "Default", "AcceptReject".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Triggered when a switch changes the state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Table'-->
<xsd:complexType name="_TableType">
<xsd:complexContent>
<xsd:extension base="n1:_ListBaseType">
<xsd:sequence>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Columns of the Table</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>This property is used to set the background color of the table. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixedLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the algorithm to be used to layout the table cells, rows, and columns.

If you set this property to false, then table is rendered with "auto" layout algorithm. This means, the width of the table and its cells depends on the content thereof. The column width is set by the widest unbreakable content in the cells. This can make the rendering slow, since the browser needs to read through all the content in the table, before determining the final layout.
Note: Since table does not have own scroll container, setting fixedLayout to false can force the table to overflow and this can cause visual problems. So, we highly suggest to use this property when table has a few columns in wide screens or horizontal scroll container(e.g Dialog, Popover) to handle overflow.
Please note that with "auto" layout mode Column width property is taken into account as minimum width.

By default, table is rendered with "fixed" layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TableSelectDialog'-->
<xsd:complexType name="_TableSelectDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items of the table.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ColumnListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="columns" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The columns bindings.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Column" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The title text appears in the dialog header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the text shown when the table has no data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If on, the user can select several options from the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="growingThreshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of items initially displayed in the table</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The content width of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rememberSelections" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This flag controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
Note: This property must be set before the dialog is opened to have an effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The content height of the inner dialog. For more information, see the dialog documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the search button has been clicked on dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the search field is changed by a user - e.g. at each key press.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event will be fired when the cancel button is clicked</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Text'-->
<xsd:complexType name="_TextType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set this property to false to disable the automatic text wrapping.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLines" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Limits the number of lines for wrapping texts.

Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TextArea'-->
<xsd:complexType name="_TextAreaType">
<xsd:complexContent>
<xsd:extension base="n1:_InputBaseType">
<xsd:attribute name="rows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the height of the text area (in lines).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cols" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the width of the textarea (in average character width).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height of the textarea with CSS. This property can overwrite the rows property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="n0:_WrappingType">
<xsd:annotation>
<xsd:documentation>The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the value of the input is changed - e.g. at each keypress</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Tile'-->
<xsd:complexType name="_TileType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="removable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tap event is raised if the user tap or click to the
control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.TileContainer'-->
<xsd:complexType name="_TileContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'tiles'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="tiles" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The tiles to be displayed by the tile container</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the container in pixel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the container in pixel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the tile container is editable and you can move or delete or add tiles.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="allowAdd" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user is allowed to add tiles in edit mode (editable = true)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileMove" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if a tile was moved</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileDelete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if a tile is deleted during edit mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tileAdd" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if a Tile is added</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Title'-->
<xsd:complexType name="_TitleType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title Text to be displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="level" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the semantic level of the title. Using 'Auto' no explicit level information is written.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleStyle" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Sets the style of the Title. Using 'Auto' the style is automatically set based on the current position of the title and the current theming.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the Title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to a generic title description.
If such a title element is associated the properties text, level and tooltip (text only) of this element are consumed.
The corresponding properties of the title control are ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToggleButton'-->
<xsd:complexType name="_ToggleButtonType">
<xsd:complexContent>
<xsd:extension base="n1:_ButtonType">
<xsd:attribute name="pressed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The property is “true” when the control is toggled. The default state of this property is "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Token'-->
<xsd:complexType name="_TokenType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence/>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>current selection status of token</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>token's identifier key</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>token's display text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>if true, token displays delete icon and fires events accordingly</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="delete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired if the user click the token's delete button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user selects a token (could be a keyboard navigation, could be a press)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Tokenizer'-->
<xsd:complexType name="_TokenizerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'tokens'-->
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="tokens" minOccurs="0">
<xsd:annotation>
<xsd:documentation>the currently displayed tokens</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Token" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>true if tokens shall be editable otherwise false</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the Tokenizer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>fired when the tokens aggregation changed (add / remove token)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.Toolbar'-->
<xsd:complexType name="_ToolbarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.
By default the Toolbar is block element, if the the width is not explicitly set, control will simply have its own natural size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="active" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the whole toolbar is clickable. Press event of this control is fired only if this property is set "true"
Note: This property should be used when there is no interactive control inside the toolbar but to make the toolbar itself interactive.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the enabled property of all controls defined in the content aggregation. Note: This property is not for the toolbar itself. See also the "active" property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height of the control.
Note: By default, the height property depends on the theme and the design property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n1:_ToolbarDesignType">
<xsd:annotation>
<xsd:documentation>Defines the toolbar design. Design settings are theme-dependent and can also define the default height of the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If "active" property is set "true" then "press" event is fired when user clicks on the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarLayoutData'-->
<xsd:complexType name="_ToolbarLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="shrinkable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the control in the toolbar is shrinkable or not. If the related control has fixed width(e.g. 100px, 5rem) then this property is ignored.

Note: Nested layout controls should not be shrinkable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the minimum width of the toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the maximum width of the toolbar item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarSeparator'-->
<xsd:complexType name="_ToolbarSeparatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ToolbarSpacer'-->
<xsd:complexType name="_ToolbarSpacerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the horizontal space.
Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
This feature can be used to push next item to the edge of the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollection'-->
<xsd:complexType name="_UploadCollectionType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:UploadCollectionItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Uploaded items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerParameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
Header parameters are not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="parameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the parameters for the FileUploader that are rendered as a hidden input field.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:UploadCollectionParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="fileType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the allowed file types for the upload.
The chosen files will be checked against an array of file types.
If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFilenameLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the maximum length of a file name.
If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFileSize" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mimeType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the allowed MIME types of files to be uploaded.
The chosen files will be checked against an array of MIME types.
If at least one file does not fit the MIME type requirements, the upload is prevented.
This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiple" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Allows multiple files to be chosen and uploaded from the same folder.
This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Allows you to set your own text for the 'No data' label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sameFilenameAllowed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Allows the user to assign the same name when editing the file name.  “Same” refers to the existence in the list of a file with the same name.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSeparators" type="n1:_ListSeparatorsType">
<xsd:annotation>
<xsd:documentation>Defines whether separators are shown between list items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the upload of a file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadUrl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the uploaded files have to be stored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when files are selected. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
Limitation: parameters and headerParameters are not supported by Internet Explorer 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileDeleted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the Delete pushbutton is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filenameLengthExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileRenamed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file name is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileSizeExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
This event is not supported by Internet Explorer 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="typeMissmatch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadComplete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered as soon as the upload request is completed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadTerminated" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is triggered as soon as the upload request was terminated by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollectionItem'-->
<xsd:complexType name="_UploadCollectionItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="contributor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the user who uploaded the file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="documentId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies a unique identifier of the file (created by the application).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the uploaded file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileSize" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Specifies the size of the uploaded file (in megabytes).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mimeType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the MIME type of the file.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="thumbnailUrl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the thumbnail of the file is located.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadedDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the date on which the file was uploaded. 
The application has to define the date format.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="url" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the URL where the file is located.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableEdit" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/Disables the Edit pushbutton.
If the value is true, the Edit pushbutton is enabled and the edit function can be used.
If the value is false, the edit function is not available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableDelete" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/Disables the Edit pushbutton.
If the value is true, the Edit pushbutton is enabled and the edit function can be used.
If the value is false, the edit function is not available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleEdit" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/Hide the Edit pushbutton.
If the value is true, the Edit pushbutton is visible.
If the value is false, the Edit pushbutton is not visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleDelete" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/Hide the Delete pushbutton.
If the value is true, the Delete pushbutton is visible.
If the value is false, the Delete pushbutton is not visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.UploadCollectionParameter'-->
<xsd:complexType name="_UploadCollectionParameterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the name of the parameter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the value of the parameter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.VBox'-->
<xsd:complexType name="_VBoxType">
<xsd:complexContent>
<xsd:extension base="n1:_FlexBoxType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsCustomItem'-->
<xsd:complexType name="_ViewSettingsCustomItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ViewSettingsItemType">
<xsd:sequence>
<xsd:element name="customControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A custom control for the filter field. It can be used for complex filtering mechanisms.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="filterCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsDialog'-->
<xsd:complexType name="_ViewSettingsDialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="sortItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of items with key and value that can be sorted over (e.g. a list of columns for a table).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="groupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of items with key and value that can be grouped on (e.g. a list of columns for a table).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of items with key and value that can be filtered on (e.g. a list of columns for a table). A filterItem is associated with one or more detail filters.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="presetFilterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of preset filter items that allow the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the dialog. If not set, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively if there is only one active tab.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sortDescending" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the sort order is descending, otherwise ascending (default).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupDescending" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the group order is descending, otherwise ascending (default).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedSortItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sort item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedSortItem"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedGroupItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Group item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedGrouptItem"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedPresetFilterItem" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Preset filter item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedPresetFilterItem". Note that either a preset filter OR multiple detail filters can be active at the same time.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="confirm" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resetFilters" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsFilterItem'-->
<xsd:complexType name="_ViewSettingsFilterItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ViewSettingsItemType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ViewSettingsItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="multiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to (true), multi selection will be allowed for the items aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.m.ViewSettingsItem'-->
<xsd:complexType name="_ViewSettingsItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_BackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>A solid background color dependent on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Transparent background.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Translucent">
<xsd:annotation>
<xsd:documentation>A translucent background depending on the opacity value of the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a header of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SubHeader">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a subheader of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Footer">
<xsd:annotation>
<xsd:documentation>The bar will be styled like a footer of the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ButtonTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>default type (no special styling)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Back">
<xsd:annotation>
<xsd:documentation>back type (back navigation button for header)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Accept">
<xsd:annotation>
<xsd:documentation>accept type (blue button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Reject">
<xsd:annotation>
<xsd:documentation>reject style (red button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>transparent type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Up">
<xsd:annotation>
<xsd:documentation>up type (up navigation button for header)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Unstyled">
<xsd:annotation>
<xsd:documentation>Unstyled type (no styling)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Emphasized">
<xsd:annotation>
<xsd:documentation>emphasized type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DateTimeInputTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DialogTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Message">
<xsd:annotation>
<xsd:documentation>Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FacetFilterListDataTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Integer">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Integer value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Float">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Float value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="String">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a String value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Boolean">
<xsd:annotation>
<xsd:documentation>&gt;An input control for specifying a Boolean value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FacetFilterTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Simple">
<xsd:annotation>
<xsd:documentation>Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Light">
<xsd:annotation>
<xsd:documentation>Forces FacetFilter to display in light mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexAlignItemsType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the box items are placed flush with the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the box items are placed flush with the cross-end edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>The box items' margin boxes are centered in the cross axis within the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Baseline">
<xsd:annotation>
<xsd:documentation>If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Stretch">
<xsd:annotation>
<xsd:documentation>Make the cross size of the items' margin boxes as close to the same size as the line as possible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexAlignSelfType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>Takes up the value of alignItems from the parent FlexBox</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the box item is placed flush with the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>The cross-start margin edges of the box item is placed flush with the cross-end edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>The box item's margin box is centered in the cross axis within the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Baseline">
<xsd:annotation>
<xsd:documentation>If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Stretch">
<xsd:annotation>
<xsd:documentation>Make the cross size of the item's margin box as close to the same size as the line as possible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexDirectionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Row">
<xsd:annotation>
<xsd:documentation>Elements are layed out along the direction of the inline axis (text direction).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Column">
<xsd:annotation>
<xsd:documentation>Elements are layed out along the direction of the block axis (usually top to bottom).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="RowReverse">
<xsd:annotation>
<xsd:documentation>Elements are layed out along the reverse direction of the inline axis (against the text direction).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColumnReverse">
<xsd:annotation>
<xsd:documentation>Elements are layed out along the reverse direction of the block axis (usually bottom to top).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexJustifyContentType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Start">
<xsd:annotation>
<xsd:documentation>Box items are packed toward the start of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>Box items are packed toward the end of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>Box items are packed toward the center of the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceBetween">
<xsd:annotation>
<xsd:documentation>Box items are evenly distributed in the line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SpaceAround">
<xsd:annotation>
<xsd:documentation>Box items are evenly distributed in the line, with half-size spaces on either end.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inherit">
<xsd:annotation>
<xsd:documentation>Inherits the value from its parent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FlexRendertypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Div">
<xsd:annotation>
<xsd:documentation>DIV elements are used for rendering</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="List">
<xsd:annotation>
<xsd:documentation>Unordered lists are used for rendering.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_HeaderLevelType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="H1">
<xsd:annotation>
<xsd:documentation>Header level 1</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H2">
<xsd:annotation>
<xsd:documentation>Header level 2</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H3">
<xsd:annotation>
<xsd:documentation>Header level 3</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H4">
<xsd:annotation>
<xsd:documentation>Header level 4</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H5">
<xsd:annotation>
<xsd:documentation>Header level 5</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H6">
<xsd:annotation>
<xsd:documentation>Header level 6</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_IBarHTMLTagType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Div">
<xsd:annotation>
<xsd:documentation>Renders as a div element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>Renders as a header element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Footer">
<xsd:annotation>
<xsd:documentation>Renders as a footer element.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_IconTabFilterDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Horizontal">
<xsd:annotation>
<xsd:documentation>A horizontally layouted design providing more space for texts.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>A vertically layouted design using minimum horizontal space.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_InputTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Text">
<xsd:annotation>
<xsd:documentation>default (text)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date value. The user can select a month, day of the month, and year.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Datetime">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DatetimeLocale">
<xsd:annotation>
<xsd:documentation>An input control for specifying a date and time value where the format depends on the locale.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Email">
<xsd:annotation>
<xsd:documentation>A text field for specifying an email address. Brings up a keyboard optimized for email address entry.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Month">
<xsd:annotation>
<xsd:documentation>An input control for selecting a month.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Number">
<xsd:annotation>
<xsd:documentation>A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Tel">
<xsd:annotation>
<xsd:documentation>A text field for specifying a phone number. Brings up a phone pad keyboard.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Time">
<xsd:annotation>
<xsd:documentation>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Url">
<xsd:annotation>
<xsd:documentation>A text field for specifying a URL. Brings up a keyboard optimized for URL entry.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Week">
<xsd:annotation>
<xsd:documentation>An input control for selecting a week.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Password">
<xsd:annotation>
<xsd:documentation>Password input where the user entry cannot be seen.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_LabelDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Bold">
<xsd:annotation>
<xsd:documentation>Displays the label in bold.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Displays the label in normal mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListHeaderDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Standard header style</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Plain">
<xsd:annotation>
<xsd:documentation>Plain header style</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>default mode (no selection)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelect">
<xsd:annotation>
<xsd:documentation>right positioned single selection mode (only one list item can be selected)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MultiSelect">
<xsd:annotation>
<xsd:documentation>multi selection mode (whole list item including checkbox will be selected)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Delete">
<xsd:annotation>
<xsd:documentation>delete mode (only one list item can be deleted)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelectMaster">
<xsd:annotation>
<xsd:documentation>Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SingleSelectLeft">
<xsd:annotation>
<xsd:documentation>left positioned single selection mode (only one list item can be selected)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListSeparatorsType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="All">
<xsd:annotation>
<xsd:documentation>Separators around the items.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inner">
<xsd:annotation>
<xsd:documentation>Separators between the items when there is no footer. Note: This enumeration depends on the theme. Please check design documentation for more details.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No item separators.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Inactive">
<xsd:annotation>
<xsd:documentation>Inactive</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Detail">
<xsd:annotation>
<xsd:documentation>Detail</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Navigation">
<xsd:annotation>
<xsd:documentation>Navigation</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Active">
<xsd:annotation>
<xsd:documentation>Active</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DetailAndActive">
<xsd:annotation>
<xsd:documentation>DetailAndActive</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_P13nPanelTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="sort">
<xsd:annotation>
<xsd:documentation>Panel type for sorting</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="filter">
<xsd:annotation>
<xsd:documentation>Panel type for filtering</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="group">
<xsd:annotation>
<xsd:documentation>Panel type for grouping</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="columns">
<xsd:annotation>
<xsd:documentation>Panel type for columns setting</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PageBackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Standard Page background color.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="List">
<xsd:annotation>
<xsd:documentation>Page background color when a List is set as the Page content.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>A solid background color dependent on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Transparent background for the page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PlacementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Left">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the left side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Right">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Top">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Bottom">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Horizontal">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the right or left side of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>Popover will be placed automatically at the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PopinDisplayType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Block">
<xsd:annotation>
<xsd:documentation>Inside the table popin, header is displayed at the first line and cell content is displayed at the next line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Inline">
<xsd:annotation>
<xsd:documentation>Inside the table popin, cell content is displayed next to the header in the same line. Note: If there is not enough space for the cell content then it jumps to the next line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="WithoutHeader">
<xsd:annotation>
<xsd:documentation>Inside the table popin, only the cell content will be visible.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_RatingIndicatorVisualModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Full">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest integer value (e.g. 1.7 -&gt; 2).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Half">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest half value (e.g. 1.7 -&gt; 1.5).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ScreenSizeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Phone">
<xsd:annotation>
<xsd:documentation>240px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Tablet">
<xsd:annotation>
<xsd:documentation>600px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Desktop">
<xsd:annotation>
<xsd:documentation>1024px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XXSmall">
<xsd:annotation>
<xsd:documentation>240px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XSmall">
<xsd:annotation>
<xsd:documentation>320px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Small">
<xsd:annotation>
<xsd:documentation>480px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Medium">
<xsd:annotation>
<xsd:documentation>560px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Large">
<xsd:annotation>
<xsd:documentation>768px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XLarge">
<xsd:annotation>
<xsd:documentation>960px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XXLarge">
<xsd:annotation>
<xsd:documentation>1120px wide</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SelectTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Will show the text.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="IconOnly">
<xsd:annotation>
<xsd:documentation>Will show only the specified icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SplitAppModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ShowHideMode">
<xsd:annotation>
<xsd:documentation>Master will automatically be hidden in portrait mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="StretchCompressMode">
<xsd:annotation>
<xsd:documentation>Master will always be shown but in a compressed version when in portrait mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="PopoverMode">
<xsd:annotation>
<xsd:documentation>Master will be shown inside a Popover when in portrait mode</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="HideMode">
<xsd:annotation>
<xsd:documentation>Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_StandardTileTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Create">
<xsd:annotation>
<xsd:documentation>Tile representing that something needs to be created</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Monitor">
<xsd:annotation>
<xsd:documentation>Monitor tile</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>Default type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SwipeDirectionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="LeftToRight">
<xsd:annotation>
<xsd:documentation>Swipe from left to right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="RightToLeft">
<xsd:annotation>
<xsd:documentation>Swipe from right to left.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Both">
<xsd:annotation>
<xsd:documentation>Both directions (left to right or right to left)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SwitchTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Will show "ON" and "OFF" translated to the current language or the custom text if provided</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AcceptReject">
<xsd:annotation>
<xsd:documentation>Switch with accept and reject icons</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ToolbarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Auto">
<xsd:annotation>
<xsd:documentation>The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>The toolbar and its content will be displayed transparent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Info">
<xsd:annotation>
<xsd:documentation>The toolbar appears smaller than the regular size to show information(e.g: text, icon).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>The toolbar has a solid background. Its content will be rendered in a standard way.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_VerticalPlacementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Top">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Bottom">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Vertical">
<xsd:annotation>
<xsd:documentation>Popover will be placed at the top or bottom of the reference control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
