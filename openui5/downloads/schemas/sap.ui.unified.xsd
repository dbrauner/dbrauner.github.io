<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.unified" xmlns:n1="sap.ui.unified" xmlns:n0="sap.ui.core">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="Calendar" type="n1:_CalendarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Basic Calendar.
This calendar is used for DatePickers</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CalendarLegend" type="n1:_CalendarLegendType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A legend for the Calendar Control. Displays special dates colors with their corresponding description. The aggregation specialDates can be set herefor.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CalendarLegendItem" type="n1:_CalendarLegendItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Item to be displayed in a CalendarLegend.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ContentSwitcher" type="n1:_ContentSwitcherType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Switches between two control areas and animates it via CSS transitions</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Currency" type="n1:_CurrencyType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A text view which displays currency values and aligns them at the separator</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateRange" type="n1:_DateRangeType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Date range for use in DatePicker</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DateTypeRange" type="n1:_DateTypeRangeType" substitutionGroup="n1:DateRange">
<xsd:annotation>
<xsd:documentation>Date range with calendar day type information. Used to visualize special days in the Calendar.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FileUploader" type="n1:_FileUploaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The framework generates an input field and a button with text "Browse ...". The API supports features such as on change uploads (the upload starts immediately after a file has been selected), file uploads with explicit calls, adjustable control sizes, text display after uploads, or tooltips containing complete file paths.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FileUploaderParameter" type="n1:_FileUploaderParameterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a parameter for the FileUploader which is rendered as a hidden inputfield.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Menu" type="n1:_MenuType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A container for menu items. When the space in the browser is not large enough to display all defined items, a scroll bar is provided.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuItem" type="n1:_MenuItemType" substitutionGroup="n1:MenuItemBase">
<xsd:annotation>
<xsd:documentation>Smallest unit in the menu hierarchy. An item can be a direct part of a menu bar, of a menu, or of a sub menu.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuItemBase" type="n1:_MenuItemBaseType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Provides the standard properties for menu items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuTextFieldItem" type="n1:_MenuTextFieldItemType" substitutionGroup="n1:MenuItemBase">
<xsd:annotation>
<xsd:documentation>Menu item which contains an text field. This menu item is e.g. helpful for filters.
The aggregation 'submenu' (inherited from parent class) is not supported for this type of menu item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Shell" type="n1:_ShellType" substitutionGroup="n1:ShellLayout">
<xsd:annotation>
<xsd:documentation>The shell control is meant as root control (full-screen) of an application.
It was build as root control of the Fiori Launchpad application and provides the basic capabilities
for this purpose. Do not use this control within applications which run inside the Fiori Lauchpad and
do not use it for other scenarios than the root control usecase.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShellHeadItem" type="n1:_ShellHeadItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Header Action item of the Shell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShellHeadUserItem" type="n1:_ShellHeadUserItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>User Header Action Item of the Shell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShellLayout" type="n1:_ShellLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The shell layout is the base for the shell control which is meant as root control (full-screen) of an application.
It was build as root control of the Fiori Launchpad application and provides the basic capabilities
for this purpose. Do not use this control within applications which run inside the Fiori Lauchpad and
do not use it for other scenarios than the root control usecase.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShellOverlay" type="n1:_ShellOverlayType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>ShellOverlay to be opened in front of a sap.ui.unified.Shell</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitContainer" type="n1:_SplitContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Provides a main content and a secondary content area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Header" type="n1:_HeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>renders a calendar header
This is used inside the calendar. Not for stand alone usage</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Month" type="n1:_MonthType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>renders a month with ItemNavigation
This is used inside the calendar. Not for stand alone usage
If used inside the calendar the properties and aggregation are directly taken from the parent
(To not duplicate and sync DateRanges and so on...)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MonthPicker" type="n1:_MonthPickerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>renders a MonthPicker with ItemNavigation
This is used inside the calendar. Not for stand alone usage</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="YearPicker" type="n1:_YearPickerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>renders a YearPicker with ItemNavigation
This is used inside the calendar. Not for stand alone usage</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.unified.Calendar'-->
<xsd:complexType name="_CalendarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="selectedDates" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Date Ranges for selected dates of the DatePicker</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DateRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="specialDates" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Date Range with type to visualize special days in the Calendar.
If one day is assigned to more than one Type, only the first one will be used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DateTypeRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="intervalSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, interval selection is allowed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, only a single date or interval, if intervalSelection is enabled, can be selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="months" type="xsd:int">
<xsd:annotation>
<xsd:documentation>number of months displayed
on phones always only one month is displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Date selection changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Date selection was cancelled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.CalendarLegend'-->
<xsd:complexType name="_CalendarLegendType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items to be displayed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:CalendarLegendItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="columnWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the columns created in which the items are arranged.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.CalendarLegendItem'-->
<xsd:complexType name="_CalendarLegendItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text to be displayed for the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.ContentSwitcher'-->
<xsd:complexType name="_ContentSwitcherType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content1" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The controls that should be shown in the first content</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The controls that should be shown in the second content</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="animation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the used animation when changing content. This just sets a CSS-class named "sapUiUnifiedACSwitcherAnimation" + this value on the root element of the control. The animation has to be implemented in CSS. This also enables applications to implement their own animations via CSS by reacting to the parent class.
See the types sap.ui.unified.ContentSwitcherAnimation for default implementations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="activeContent" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of the currently active content (1 or 2).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.Currency'-->
<xsd:complexType name="_CurrencyType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The currency value</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currency" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The ISO 4217 currency code</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxPrecision" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the space that is available for the precision of the various currencies.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useSymbol" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show the currency symbol instead of the ISO currency code</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.DateRange'-->
<xsd:complexType name="_DateRangeType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="startDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Start date for a date range. This must be a JavaScript date object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="endDate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Start date for a date range. If empty only a single date is presented by this DateRange element. This must be a JavaScript date object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.DateTypeRange'-->
<xsd:complexType name="_DateTypeRangeType">
<xsd:complexContent>
<xsd:extension base="n1:_DateRangeType">
<xsd:attribute name="type" type="n1:_CalendarDayTypeType">
<xsd:annotation>
<xsd:documentation>Type of the dayte range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.FileUploader'-->
<xsd:complexType name="_FileUploaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="parameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The parameters for the FileUploader which are rendered as a hidden inputfield.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FileUploaderParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerParameters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The header parameters for the FileUploader which are only submitted with XHR requests. Header parameters are not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:FileUploaderParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value of the path for file upload.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled controls have different colors, depending on customer settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadUrl" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Used when URL address is on a remote server.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique control name for identification on the server side after sending data to the server.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the displayed control width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadOnChange" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="additionalData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sameFilenameAllowed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The Button text can be overwritten using this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
Example: ["jpg", "png", "bmp"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="multiple" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFileSize" type="xsd:float">
<xsd:annotation>
<xsd:documentation>A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mimeType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 8 and 9.
Example: mimeType ["image/png", "image/jpeg"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sendXHR" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Placeholder for the text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="style" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useMultipart" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 8 and 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maximumFilenameLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum length of a filename which the FileUploader will accept. If the maximum filename length is exceeded, the corresponding Event 'filenameLengthExceed' is fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success, None.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHovered" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSelected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true (default), the display sequence is 1. icon 2. control text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the button is displayed without any text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the value of the file path has been changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadComplete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired as soon as the upload request is completed (either successful or unsuccessful). To see if the upload request was successful, check the 'state' parameter for a value 2xx.
The uploads actual progress can be retrieved via the 'uploadProgress' Event.
However this covers only the client side of the Upload process and does not give any success status from the server.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="typeMissmatch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the type of a file does not match the mimeType or fileType property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileSizeExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the size of a file is above the maximumFileSize property. This event is not supported by Internet Explorer 8 and 9 (same restriction as for the property maximumFileSize).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fileAllowed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the file is allowed for upload on client side.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadProgress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after the upload has started and before the upload is completed and contains progress information related to the running upload. Depending on file size, band width and used browser the event is fired once or multiple times.
This is event is only supported with property sendXHR set to true, i.e. the event is not supported in Internet Explorer 8 or 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uploadAborted" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired after the current upload has been aborted.
This is event is only supported with property sendXHR set to true, i.e. the event is not supported in Internet Explorer 8 or 9.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filenameLengthExceed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired, if the filename of a chosen file is longer than the value specified with the maximumFilenameLength property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.FileUploaderParameter'-->
<xsd:complexType name="_FileUploaderParameterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the hidden inputfield.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value of the hidden inputfield.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.Menu'-->
<xsd:complexType name="_MenuType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n1:MenuItemBase" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of menu items</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:MenuItemBase" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled menus have other colors than enabled ones, depending on customer settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The label/description provided for screen readers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxVisibleItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Max. number of items to be displayed before an overflow mechanimn appears. Values smaller than 1 mean infinite number of visible items.
The menu can not become larger than the screen height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of items to be shifted up or down upon Page-up or Page-up key navigation. Values smaller than 1 mean infinite number of page items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelect" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides the application an alternative option to listen to select events. This event is only fired on the root menu of a menu hierarchy.
Note that there is also a select event available for MenuItem; if the current event is used, the select event of a MenuItem becomes redundant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.MenuItem'-->
<xsd:complexType name="_MenuItemType">
<xsd:complexContent>
<xsd:extension base="n1:_MenuItemBaseType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Item text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.MenuItemBase'-->
<xsd:complexType name="_MenuItemBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'submenu'-->
<xsd:element ref="n1:Menu" minOccurs="0"/>
<xsd:element name="submenu" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of a menu item's sub menu.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:Menu" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled items have different colors, depending on customer settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible controls are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startsSection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a divider is displayed before the item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when an item is selected. The event is also available for items having a sub menu.
A mouse click or space bar click on a sub menu item fires the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.MenuTextFieldItem'-->
<xsd:complexType name="_MenuTextFieldItemType">
<xsd:complexContent>
<xsd:extension base="n1:_MenuItemBaseType">
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The label of the contained text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value of the contained text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.Shell'-->
<xsd:complexType name="_ShellType">
<xsd:complexContent>
<xsd:extension base="n1:_ShellLayoutType">
<xsd:sequence>
<xsd:element name="curtainContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the curtain area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="curtainPaneContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the pane area of the curtain.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The buttons shown in the begin (left in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported. If a custom header is set this aggregation has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ShellHeadItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headEndItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The buttons shown in the end (right in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported (when user is set only 1). If a custom header is set this aggregation has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ShellHeadItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="search" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Experimental (This aggregation might change in future!): The search control which should be displayed in the shell header. If a custom header is set this aggregation has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="user" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The user item which is rendered in the shell header beside the items. If a custom header is set this aggregation has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:ShellHeadUserItem" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The application icon. If a custom header is set this property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCurtain" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows / Hides the curtain.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCurtainPane" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows / Hides the side pane on the curtain.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to false, the search area (aggregation 'search') is hidden. If a custom header is set this property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.ShellHeadItem'-->
<xsd:complexType name="_ShellHeadItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="startsSection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a divider is displayed before the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSeparator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a separator is displayed after the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the item gets a special design.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMarker" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a theme dependent marker is shown on the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The icon of the item, either defined in the sap.ui.core.IconPool or an URI to a custom image. An icon must be set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible items are not shown on the UI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user presses the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.ShellHeadUserItem'-->
<xsd:complexType name="_ShellHeadUserItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="username" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showPopupIndicator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The user item is intended to be used for user settings. Normally these settings are done via a Menu or Dialog.
If this property is set to true an indicator for such a popup mechanismn is shown in the item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="image" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>An image of the user, normally an URI to a image but also an icon from the sap.ui.core.IconPool is possible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user presses the button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.ShellLayout'-->
<xsd:complexType name="_ShellLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the main canvas.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="paneContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the pane area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="header" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The control to appear in the header area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showPane" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows / Hides the side pane.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerHiding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the header can be hidden (manually or automatically). This feature is only available when touch events are supported.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to false, no header (and no items, search, ...) is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.ShellOverlay'-->
<xsd:complexType name="_ShellOverlayType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the overlay.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="search" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Experimental (This aggregation might change in future!): The search control which should be displayed in the overlay header.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="shell" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Reference to the sap.ui.unified.Shell or sap.ui.unified.ShellLayout control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="closed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the overlay was closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.SplitContainer'-->
<xsd:complexType name="_SplitContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the main area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondaryContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to appear in the secondary area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSecondaryContent" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows / Hides the secondary area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryContentSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width if the secondary content. The height is always 100%.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryContentWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Do not use. Use secondaryContentSize instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientation" type="n0:_OrientationType">
<xsd:annotation>
<xsd:documentation>Whether to show the secondary content on the left ("Horizontal", default) or on the top ("Vertical").</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.calendar.Header'-->
<xsd:complexType name="_HeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="textButton1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text of the first button (normally month)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelButton1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>aria-label of the first button (normally month)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textButton2" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text of the second button (normally year)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelButton2" type="xsd:string">
<xsd:annotation>
<xsd:documentation>aria-label of the second button (normally year)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabledPrevious" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>enables the previous button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabledNext" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>enables the Next button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pressPrevious" type="xsd:string">
<xsd:annotation>
<xsd:documentation>previous button pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pressNext" type="xsd:string">
<xsd:annotation>
<xsd:documentation>next button pressed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pressButton1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>first button pressed (normally month)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pressButton2" type="xsd:string">
<xsd:annotation>
<xsd:documentation>second button pressed (normally year)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.calendar.Month'-->
<xsd:complexType name="_MonthType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="selectedDates" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Date Ranges for selected dates of the DatePicker</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DateRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="specialDates" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Date Range with type to visualize special days in the Calendar.
If one day is assigned to more than one Type, only the first one will be used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n1:DateTypeRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="date" type="xsd:string">
<xsd:annotation>
<xsd:documentation>the month including this date is rendered and this date is initial focused (if no other focus set)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="intervalSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, interval selection is allowed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, only a single date or interval, if intervalSelection is enabled, can be selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, a header with the month name is shown</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Date selection changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="focus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Date focus changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.calendar.MonthPicker'-->
<xsd:complexType name="_MonthPickerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="month" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The month is initial focused and selected
The value must be between 0 and 11</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Month selection changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.unified.calendar.YearPicker'-->
<xsd:complexType name="_YearPickerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="year" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The year is initial focused and selected
The value must be between 0 and 9999</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Month selection changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_CalendarDayTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Type01">
<xsd:annotation>
<xsd:documentation>Type 01: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type02">
<xsd:annotation>
<xsd:documentation>Type 02: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type03">
<xsd:annotation>
<xsd:documentation>Type 03: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type04">
<xsd:annotation>
<xsd:documentation>Type 04: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type05">
<xsd:annotation>
<xsd:documentation>Type 05: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type06">
<xsd:annotation>
<xsd:documentation>Type 06: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type07">
<xsd:annotation>
<xsd:documentation>Type 07: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type08">
<xsd:annotation>
<xsd:documentation>Type 08: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type09">
<xsd:annotation>
<xsd:documentation>Type 09: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Type10">
<xsd:annotation>
<xsd:documentation>Type 10: The semantic meaning must be defined by the application. It can be shown in a legend.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ContentSwitcherAnimationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No animation. Content is switched instantly.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Fade">
<xsd:annotation>
<xsd:documentation>Content is faded (opacity change).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ZoomIn">
<xsd:annotation>
<xsd:documentation>The new content is "zoomed in" from the center and grows to fill the full content area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ZoomOut">
<xsd:annotation>
<xsd:documentation>The old content is "zoomed out", i.e. shrinks to a point at the center of the content area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Rotate">
<xsd:annotation>
<xsd:documentation>The new content rotates in. (Just like one of those old newspaper-animations.)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SlideRight">
<xsd:annotation>
<xsd:documentation>The new slides in from the left (to the right).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SlideOver">
<xsd:annotation>
<xsd:documentation>The new content slides in from the left while the old content slides out to the left at the same time.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
