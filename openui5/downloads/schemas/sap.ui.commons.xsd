<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.commons" xmlns:n2="sap.ui.commons" xmlns:n1="sap.ui.layout" xmlns:n0="sap.ui.core">
<xsd:import namespace="sap.ui.layout"/>
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="Accordion" type="n2:_AccordionType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Contains N sections which act as containers for any library controls</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AccordionSection" type="n2:_AccordionSectionType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a panel which is a container for other controls. The container does not have any layout function.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ApplicationHeader" type="n2:_ApplicationHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The application header control stands on the top of any application page. It consists basically of 4 areas. Logo area/Function area provided by application/Search area/Logout area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area" type="n2:_AreaType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Used for defining areas in an image map. At runtime, the user can trigger an action, or start a URL, from the single image areas.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AutoComplete" type="n2:_AutoCompleteType" substitutionGroup="n2:ComboBox">
<xsd:annotation>
<xsd:documentation>Textfield with list based text completion.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Button" type="n2:_ButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Enables users to trigger actions such as save or print. For the button UI, you can define some text or an icon, or both.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Callout" type="n2:_CalloutType" substitutionGroup="n2:CalloutBase">
<xsd:annotation>
<xsd:documentation>Callout is a small popup with some useful information and links that is shown when a mouse is hovered over a specific view element.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CalloutBase" type="n2:_CalloutBaseType" substitutionGroup="n0:TooltipBase">
<xsd:annotation>
<xsd:documentation>CalloutBase is a building block for Callout. Do not use it directly. Use the Callout control instead</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Carousel" type="n2:_CarouselType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Carousel holds multiple controls and displays them vertical or horizontal next to each other. You can define how many content items should be displayed at once or let the carousel determine that for you. Navigation is done through buttons or keys.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CheckBox" type="n2:_CheckBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Provides a box which can be flagged, the box has a label. A check box can either stand alone, or in a group with other check boxes. As an option, the boxes can initially be set to status 'Not Editable'.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColorPicker" type="n2:_ColorPickerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control gives the user the opportunity to choose a color. The color can be defined using HEX-, RGB- or HSV-values or a CSS colorname.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ComboBox" type="n2:_ComboBoxType" substitutionGroup="n2:TextField">
<xsd:annotation>
<xsd:documentation>The control provides a field that allows end users to either enter some text, or to choose an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes, single listbox items, or text strings defined for the current application.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DatePicker" type="n2:_DatePickerType" substitutionGroup="n2:TextField">
<xsd:annotation>
<xsd:documentation>Allows end users to interact with dates.
Entries can directly be written in, or selected from a calendar pad.
Note: Dates can always be manually entered in the fix YYYYMMDD format, on top of the flexible "locale" format.
If the value is provided via data binding, using a Date.type the formatter of the Date.type is used.
Since version 1.22 the unified.Calendar is used inside the datePicker. So applications using the DatePicker should load the unified library. Otherwise it will be loaded the first time a DatePicker is opened.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Dialog" type="n2:_DialogType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>An interactive window appearing on request displaying information to the user. The API supports features such as popups with fixed sizes, popups with unlimited width, scrolling bars for large windows, and control nesting (for example, a drop-down list can be included in the window).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DropdownBox" type="n2:_DropdownBoxType" substitutionGroup="n2:ComboBox">
<xsd:annotation>
<xsd:documentation>The control provides a field that allows end users to an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes or single list items.
Binding (see DataBinding) is also supported for list items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FileUploader" type="n2:_FileUploaderType" substitutionGroup=":FileUploader">
<xsd:annotation>
<xsd:documentation>The framework generates an input field and a button with text "Browse ...". The API supports features such as on change uploads (the upload starts immediately after a file has been selected), file uploads with explicit calls, adjustable control sizes, text display after uploads, or tooltips containing complete file paths.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FileUploaderParameter" type="n2:_FileUploaderParameterType" substitutionGroup=":FileUploaderParameter">
<xsd:annotation>
<xsd:documentation>Represents a parameter for the FileUploader which is rendered as a hidden inputfield.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormattedTextView" type="n2:_FormattedTextViewType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Allows to use a limited set of HTML tags for display</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HorizontalDivider" type="n2:_HorizontalDividerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Divides the screen in visual areas.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Image" type="n2:_ImageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A wrapper around the IMG tag. The image can be loaded from a remote or local server.
There are various size setting options available, and the images can be combined with actions.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ImageMap" type="n2:_ImageMapType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Combination of image areas where at runtime these areas are starting points for hyperlinks or actions</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="InPlaceEdit" type="n2:_InPlaceEditType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The InPlaceEdit is a functionality to have text in display mode that can be changed in place.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Label" type="n2:_LabelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used for labeling other controls. The API provides formatting options, for example for bold display or alignment. A label can have an icon.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Link" type="n2:_LinkType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Provides an absolute or relative reference to an internal or external URL. The classical target parameters are supported.
Another usage scenario is triggering an action, for example to open a popup window. In both cases, the link is a hypertext link.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ListBox" type="n2:_ListBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Provides a list of items from which users can choose an item. For the design of the list box, features such as defining the list box height,
fixing the number of visible items, choosing one item to be the item that is marked by default when the list box is shown, or a scroll bar for large list boxes
are available.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Menu" type="n2:_MenuType" substitutionGroup=":Menu">
<xsd:annotation>
<xsd:documentation>A container for menu items. When the space in the browser is not large enough to display all defined items, a scroll bar is provided.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuBar" type="n2:_MenuBarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Represents a user interface area which is the entry point for menus with their menu items. MenuBar is useful for applications which shall offer a
set of actions that shall be provided in a structured way. The MenuBar contains the menu titles from where users navigate to the single items. The control supports
for example long menu item texts, automated scrolling for menu items when the browser space is not large enough to display all items, defining images for single
or all items in a menu, automated layouting of items with or w/o image, and active/non-active items.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuButton" type="n2:_MenuButtonType" substitutionGroup="n2:Button">
<xsd:annotation>
<xsd:documentation>Common button control that opens a menu when clicked by the user. The control provides an API for configuring the docking position
of the menu.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuItem" type="n2:_MenuItemType" substitutionGroup=":MenuItem">
<xsd:annotation>
<xsd:documentation>Smallest unit in the menu hierarchy. An item can be a direct part of a menu bar, of a menu, or of a sub menu.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MenuTextFieldItem" type="n2:_MenuTextFieldItemType" substitutionGroup=":MenuTextFieldItem">
<xsd:annotation>
<xsd:documentation>Menu item which contains an text field. This menu item is e.g. helpful for filters.
The aggregation 'submenu' (inherited from parent class) is not supported for this type of menu item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Message" type="n2:_MessageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Creates the "Message"s to be supplied to the "MessageBar" Control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessageBar" type="n2:_MessageBarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Creates an instance of a "MessageBar" Control, for displaying "Message"s.
There is no imposed limit on the number of "MessageBar"s that can be created, but using only 1 makes sense, specially if accessing it (via Ctl-m) becomes a necessity.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessageList" type="n2:_MessageListType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Instantiated by the "MessageBar" Control if the user ever requests to generate the corresponding "MessageList".</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessageToast" type="n2:_MessageToastType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Responsible for displaying the new incoming messages, one at the time, on top of the MessageBar.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Paginator" type="n2:_PaginatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Provides navigation between pages within a list of numbered pages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Panel" type="n2:_PanelType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Represents a container with scroll functionality, the control can be used for text and controls. The Panel does not layout the embedded controls.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PasswordField" type="n2:_PasswordFieldType" substitutionGroup="n2:TextField">
<xsd:annotation>
<xsd:documentation>A text field with masked characters which borrows its properties and methods from TextField.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ProgressIndicator" type="n2:_ProgressIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Shows the progress of a process in a graphical way. The indicator can be displayed with or without numerical values.
The filling can be displayed in color only, or additionally with the percentage rate. The indicator status can be interactive.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButton" type="n2:_RadioButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Consists of a round element and a descriptive text. Generally, you would create at least two radio button controls;
by this, you provide a limited choice for the user. Radio buttons can trigger events.
Available value states are "Error", "None", "Success", "Warning".</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RadioButtonGroup" type="n2:_RadioButtonGroupType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>a group of RadioButtons to hande as one UI element.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RangeSlider" type="n2:_RangeSliderType" substitutionGroup="n2:Slider">
<xsd:annotation>
<xsd:documentation>The interactive control is displayed either as a horizontal or a vertical line with two pointers and units of measurement.
Users can move the pointers along the line to change a range with graphical support.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RatingIndicator" type="n2:_RatingIndicatorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to let the user do some rating on a certain topic. The amount of rating symbols can be specified, as well as the URIs to the
image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveContainer" type="n2:_ResponsiveContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to provide a container, which can show different content depending on its current width. It fires an event, whenever a new range is reached. In addition the content of the new range is automatically shown, if it is set.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveContainerRange" type="n2:_ResponsiveContainerRangeType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Defines a range for the ResponsiveContainer</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RichTooltip" type="n2:_RichTooltipType" substitutionGroup="n0:TooltipBase">
<xsd:annotation>
<xsd:documentation>Is used to provide tool tips that can have long text, image and title. This tool tip extends the TooltipBase.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RoadMap" type="n2:_RoadMapType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to display step-by-step work flows of a clearly defined work process</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RoadMapStep" type="n2:_RoadMapStepType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Step used within a RoadMap Control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RowRepeater" type="n2:_RowRepeaterType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This control displays items in a stacked list format, allowing the user to page in order to see more items or to use the offered filtering and sorting capabilities in order to manipulate the displayed data.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RowRepeaterFilter" type="n2:_RowRepeaterFilterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>This element is used by the RowRepeater and allows to define a filter in this context along with the related data such as a text and an icon.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RowRepeaterSorter" type="n2:_RowRepeaterSorterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>This element is used by the RowRepeater and allows to define a sorter in this context along with the related data such as a text and an icon.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SearchField" type="n2:_SearchFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Allows the user to type search queries and to trigger the search. Optionally, suggestions can be added.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SearchProvider" type="n2:_SearchProviderType" substitutionGroup="n0:OpenSearchProvider">
<xsd:annotation>
<xsd:documentation>A SearchProvider which can be attached to a Search Field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SegmentedButton" type="n2:_SegmentedButtonType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SegmentedButton provides a group of multiple buttons. Only one button can be active. The behaviour is more ore less like a radio button group.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Slider" type="n2:_SliderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The interactive control is displayed as a horizontal line with a pointer and units of measurement.
Users can move the pointer along the line to change values with graphical support.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Splitter" type="n2:_SplitterType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Allows to split the screen into two areas. Make sure that the container for the splitter has an absolute height or set an absolute height for the splitter using the height property. Otherwise the height of the splitter is calculated by the height of its contents.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tab" type="n2:_TabType" substitutionGroup="n2:Panel">
<xsd:annotation>
<xsd:documentation>A single page in a TabStrip control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TabStrip" type="n2:_TabStripType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A container for tab controls which contain the content and generally other controls. The user switches between the tabs then to display the content.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TextArea" type="n2:_TextAreaType" substitutionGroup="n2:TextField">
<xsd:annotation>
<xsd:documentation>Control to enter or display multible row text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TextField" type="n2:_TextFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Control is used to enter text.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TextView" type="n2:_TextViewType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Is used to display some continous text. The control can inherit the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Title" type="n2:_TitleType" substitutionGroup="n0:Title">
<xsd:annotation>
<xsd:documentation>Represents a title element that can be used for aggregation with other controls</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToggleButton" type="n2:_ToggleButtonType" substitutionGroup="n2:Button">
<xsd:annotation>
<xsd:documentation>The ToggleButton Control is a Button that can be toggled between pressed and normal state</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Toolbar" type="n2:_ToolbarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A horizontal row of items where in many cases the single toolbar items are buttons containing icons. Note that all controls with the
sap.ui.commons.ToolbarItem interface can be used as item: Button, ComboBox, TextField.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ToolbarSeparator" type="n2:_ToolbarSeparatorType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A small vertical line that is generally added to the tool bar between the items to visually separate them.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tree" type="n2:_TreeType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Simple tree to display item in a hierarchical way</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TreeNode" type="n2:_TreeNodeType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Tree node element</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TriStateCheckBox" type="n2:_TriStateCheckBoxType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>TriStateCheckBox to reflect mixed state for checkboxes. The control can display three states, namely checked, unchecked and mixed. However, mixed state cannot be directly reached by user interaction on the particular control.
It can be only set by the control's public toggle function, to make a behaviour possible which is e.g. required in checkbox trees.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ValueHelpField" type="n2:_ValueHelpFieldType" substitutionGroup="n2:TextField">
<xsd:annotation>
<xsd:documentation>A TextField with an attached icon which triggeres an event.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Form" type="n2:_FormType" substitutionGroup="n1:Form">
<xsd:annotation>
<xsd:documentation>Form control.
Holder for form control to be rendered in a specific form layout.
A Form supports VariantLayoutData for it's conent to allow a simple switching of Layouts.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormContainer" type="n2:_FormContainerType" substitutionGroup="n1:FormContainer">
<xsd:annotation>
<xsd:documentation>Used to group form elements.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormElement" type="n2:_FormElementType" substitutionGroup="n1:FormElement">
<xsd:annotation>
<xsd:documentation>A form element is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormLayout" type="n2:_FormLayoutType" substitutionGroup="n1:FormLayout">
<xsd:annotation>
<xsd:documentation>Base layout for Forms.
Other Layouts must inherit from this one.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridContainerData" type="n2:_GridContainerDataType" substitutionGroup="n1:GridContainerData">
<xsd:annotation>
<xsd:documentation>Grid layout specific properties for FormContainers.
The width and height properties of the elements are ignored since the witdh and heights are defined by the grid cells.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridElementData" type="n2:_GridElementDataType" substitutionGroup="n1:GridElementData">
<xsd:annotation>
<xsd:documentation>The grid specific layout data for FormElement fields.
The width property of the elements is ignored since the width is defined by grid cells.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridLayout" type="n2:_GridLayoutType" substitutionGroup="n1:GridLayout">
<xsd:annotation>
<xsd:documentation>This Layout implements a guideline 2.0 grid. This can be a 16 column grid or an 8 column grid.

To adjust the content inside the GridLayout GridContainerData and GridElementData could be used.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveLayout" type="n2:_ResponsiveLayoutType" substitutionGroup="n1:ResponsiveLayout">
<xsd:annotation>
<xsd:documentation>Renders a form with responsive layout. Internally the ResponsiveFlowLayout is used.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SimpleForm" type="n2:_SimpleFormType" substitutionGroup="n1:SimpleForm">
<xsd:annotation>
<xsd:documentation>Use the SimpleForm to create a form based on title, label and fields that are stacked in the content aggregation. Add Title to start a new FormContainer(Group). Add Label to start a new row in the container. Add Input/Display controls as needed. Use LayoutData to influence the layout for special cases in the Input/Display controls.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AbsoluteLayout" type="n2:_AbsoluteLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The Absolute Layout positions its child controls absolutely</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BorderLayout" type="n2:_BorderLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Based upon the border layout as it comes with the Java standard. Using this layout, you are able to divide your available UI space into five areas whose sizes can be defined. These areas are: Top: Header; Bottom: Footer; Begin: Left/right-hand side panel; Center: Content area
in the middle; End: Right/left-hand side panel.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BorderLayoutArea" type="n2:_BorderLayoutAreaType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The BorderLayoutArea represents one area of a BorderLayout</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HorizontalLayout" type="n2:_HorizontalLayoutType" substitutionGroup="n1:HorizontalLayout">
<xsd:annotation>
<xsd:documentation>A layout that provides support for horizontal alignment of controls</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MatrixLayout" type="n2:_MatrixLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>&lt;p&gt;
A matrix layout arranges controls in a grid structure, using rows which
need not have the same number of cells.
&lt;/p&gt;

&lt;p&gt;
It uses predefined cell classes that guarantee appropriate distances
between cells in the grid. The cell's &lt;code&gt;vGutter&lt;/code&gt; property lets
you specify additional horizontal distances easily. You can set these
additional distances (known as gutters) with or without separators.
The distance for each cell is specified by assigning a specific
enumeration value of the class &lt;code&gt;LayoutCellSeparator&lt;/code&gt; of the
matrix data object.
&lt;/p&gt;

&lt;p&gt;
You should &lt;b&gt;avoid nesting&lt;/b&gt; matrix layouts. You should only use a
matrix layout if you need to align controls horizontally across rows.
&lt;/p&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MatrixLayoutCell" type="n2:_MatrixLayoutCellType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Non-control element used as part of a matrix layout's inner structure.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MatrixLayoutRow" type="n2:_MatrixLayoutRowType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Non-control element used as part of a matrix layout's inner structure.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PositionContainer" type="n2:_PositionContainerType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Is used to specify the position of a control in the AbsoluteLayout</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveFlowLayout" type="n2:_ResponsiveFlowLayoutType" substitutionGroup="n1:ResponsiveFlowLayout">
<xsd:annotation>
<xsd:documentation>This is a layout where several controls can be added. These controls are blown up to fit a whole line. If the window resizes the controls are moved between the lines and resized again.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveFlowLayoutData" type="n2:_ResponsiveFlowLayoutDataType" substitutionGroup="n1:ResponsiveFlowLayoutData">
<xsd:annotation>
<xsd:documentation>This is a LayoutData Element that can be added to a control if this control is used within a ResponsiveFlowLayout</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VerticalLayout" type="n2:_VerticalLayoutType" substitutionGroup="n1:VerticalLayout">
<xsd:annotation>
<xsd:documentation>In this layout the elemnts are orderd one below the other</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.commons.Accordion'-->
<xsd:complexType name="_AccordionType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'sections'-->
<xsd:element ref="n2:AccordionSection" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="sections" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Empty container used to display any library controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:AccordionSection" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the width specified is smaller than a section content, a horizontal scroll bar is provided.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="openedSectionsId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Section IDs that shall be opened by default at application start.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sectionOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the user opens a section.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sectionClose" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the user closes a section.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sectionsReorder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Triggered when the user changes the position of a section.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.AccordionSection'-->
<xsd:complexType name="_AccordionSectionType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregates the controls that are contained in the panel. Control layouting is browser-dependent. For a stable content layout, use a layout control as direct single child.
When the panel dimensions are set, the child control may have width and height of 100%;
when the panel dimensions are not set, the child defines the panel size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the section content exceeds maxHeight, a vertical scroll bar appears.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Requirement is that the used theme supports the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="collapsed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>It is recommended to make some settings for the width when the section is set to 'collapsed'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text for the section header</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scroll" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user scrolls the panel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ApplicationHeader'-->
<xsd:complexType name="_ApplicationHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="logoSrc" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Path (src) to the logo icon to be displayed in the application header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logoText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text that will be displayed beside the logo in the application header. This property is optional.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayLogoff" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the logoff area will be displayed at the right hand side of the application header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="userName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>User name that will be displayed beside the welcome text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayWelcome" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>By default, set to true and dislpays the welcome text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="logoff" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires an event to log off the user from the application.
No parameters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Area'-->
<xsd:complexType name="_AreaType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="shape" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value is a string and can be 'rect' for rectangle, 'poly' for poligon, 'circle', or default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="coords" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Coordinates of the area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Hyper link that is executed when the area is clicked</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alt" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Alternative text that is displayed in the case the image is not available</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.AutoComplete'-->
<xsd:complexType name="_AutoCompleteType">
<xsd:complexContent>
<xsd:extension base="n2:_ComboBoxType">
<xsd:attribute name="enableScrolling" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether scrolling should be enabled when the number of items is higher than maxPopupItems.
If set to false only the first n items (n=maxPopupItems) are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the user has changed the value and a suggestion list update should occur.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Button'-->
<xsd:complexType name="_ButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Button text displayed at runtime.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control width as common CSS-size (px or % as unit, for example)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="helpId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier used for help service</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHovered" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSelected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true (default), the display sequence is 1. icon 2. control text .</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the button height. If this property is set, the height which is specified by the underlying theme is not used any longer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="styled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The button is rendered as lite button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="style" type="n2:_ButtonStyleType">
<xsd:annotation>
<xsd:documentation>Style of the button.
(e.g. emphasized)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user presses the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Callout'-->
<xsd:complexType name="_CalloutType">
<xsd:complexContent>
<xsd:extension base="n2:_CalloutBaseType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content of the Callout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.CalloutBase'-->
<xsd:complexType name="_CalloutBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_TooltipBaseType">
<xsd:attribute name="open" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the popup is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the Callout window is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before a Callout is displayed. Call the preventDefault method of the event object to postpone opening. Application may use this event to start asynchronous Ajax call to load the Callout content</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="opened" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Is fired when the Callout has been opened</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Carousel'-->
<xsd:complexType name="_CarouselType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls which are displayed inside the carousel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n2:_OrientationType">
<xsd:annotation>
<xsd:documentation>Can be either "horizontal" or "vertical"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of carousel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of carousel</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultItemHeight" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default height of item in carousel if no height can be determined</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultItemWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default width of item in carousel if no height can be determined</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="animationDuration" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Duration for animation when navigating through children</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>If defined, the carousel displays the number of items defined. Items will be resized to fit the area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="handleSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Size of the handle in pixels. (Height for vertical carousel, width for horizontal carousel)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="firstVisibleIndex" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The index of the element in the content aggreation which is displayed first on rendering</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.CheckBox'-->
<xsd:complexType name="_CheckBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="checked" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Contains the state of the control whether it is flagged with a check mark, or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the check box</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using this property, the control could be disabled, if required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user shall be allowed to select the check box.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width can be set to an absolute value. If no value is set, the control width results from the text length.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>The value can be set to LTR or RTL. Otherwise, the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ColorPicker'-->
<xsd:complexType name="_ColorPickerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="colorString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the import-parameter of the ColorPicker.
As input-parameter, it can be a Hexadecimal string (#FFFFFF), a RGB-string rgb(255,255,255), a HSV-string hsv(360,100,100) or a CSS-colorname 'red'.
As output-parameter it is a RGB-string containing the current color.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value was changed. This event is fired if the value has changed by an user action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ComboBox'-->
<xsd:complexType name="_ComboBoxType">
<xsd:complexContent>
<xsd:extension base="n2:_TextFieldType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:ListItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Getter for aggregation items. Allows setting ListItems (see sap.ui.core.ListBox) that shall be displayed in the list.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:ListItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxPopupItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the number of items that shall be displayed at once. If the overall number of list items is higher than the setting, a scrollbar is provided.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displaySecondaryValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the "additionalText" property that is available for sap.ui.core.ListItem shall be displayed in the list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the selected item.
If the value has no corresponding item the key is empty.
If duplicate keys exists the first item matching the key is used.
If the key is set to a not existing value it will not be changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedItemId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of Selected item. If the value has no corresponding item, the selected item id is empty.
If the selected item id is set to an not existing item, it will not be changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listBox" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Using this method, you provide a listbox control. This allows reuse of item lists in different controls. Either a control id can be used as new target, or a control instance.
The ListBox must not be rendered somewhere in the UI. But if you want to bind the ListBox Items to a model it must be in the control tree. So we suggest to add it as dependent somewhere (e.g. to the view or the first used ComboBox). If it is not set as child or dependant to an other control it will be automatically set as dependent to the first ComboBox where it is assigned.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.DatePicker'-->
<xsd:complexType name="_DatePickerType">
<xsd:complexContent>
<xsd:extension base="n2:_TextFieldType">
<xsd:attribute name="locale" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the locale (language and country), e.g. "en-US", whose translations and Date formatters should be used to render the DatePicker.If the value property is bound to a model using a Date type the locale will be ignored, because the locale information of the model are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="yyyymmdd" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the date as a "yyyymmdd" string, independent from the format used. The inherited textField "value" attribute uses the date format as configured via the locale.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Dialog'-->
<xsd:complexType name="_DialogType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregating the buttons to display at the bottom of the dialog, for example OK and Cancel. Association defaultButton can be used for one of the defined buttons.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregating the content of the dialog (one or more controls).

Caveat: when content is added with width given as a percentage, the Dialog itself should have a width set.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Outer width of dialog window. When not set and not constrained by one of the width parameters (minWidth/maxWidth), the window size is automatically adapted to the content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Outer height of dialog window. When not set and not constrained by one of the height parameters (minHeight/maxHeight), the window size is automatically adapted to the content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollLeft" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Scroll position from left to right. "0" means leftmost position.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollTop" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Scroll position from top to buttom. "0" means topmost position.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Dialog title displayed in the header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="applyContentPadding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Padding is theme-dependent. When set to "false", the content extends to the dialog borders.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCloseButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Displays a close button in the title bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the dialog window can be resized by the user. The dialog frame contains the visual symbol.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Minimum outer width of the dialog window. When set, neither the user nor some layout settings can make the window smaller.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Minimum outer height of the dialog window. When set, neither the user nor some layout settings can make the window smaller.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Maximum outer width of the dialog window. If set, neither the user nor some layout settings can make the window larger.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Maximum outer height of the dialog window. If set, neither the user nor some layout settings can make the window larger.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentBorderDesign" type="n2:_BorderDesignType">
<xsd:annotation>
<xsd:documentation>Border design is theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="modal" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specify whether the dialog should be modal, or not. In case of &lt;code&gt;true&lt;/code&gt; the focus is kept inside the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessibleRole" type="n0:_AccessibleRoleType">
<xsd:annotation>
<xsd:documentation>The ARIA role for the control. E.g. for alert-style Dialogs this can be set to "AlertDialog".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keepInWindow" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether Dialog movement should be restricted to the visible area of the window. This only affects drag&amp;drop movements by the user. This doesn't affect modal dialogs -&gt; modal dialogs always stay in the window.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="autoClose" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set to true the Dialog will close if the Dialog loses its focus</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines one of the buttons that have been provided via button aggregation to be the default button. This default button is initially selected, if no control is set via the initialFocus association explicitly. The default button is activated when Enter is pressed in the context of the dialog and when the currently selected element does not handle the Enter event itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialFocus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the control that shall get the focus when the dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="closed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the dialog has been closed (after closing-animation etc.). Event parameters provide information about last position and last size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.DropdownBox'-->
<xsd:complexType name="_DropdownBoxType">
<xsd:complexContent>
<xsd:extension base="n2:_ComboBoxType">
<xsd:attribute name="searchHelpEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the DropdownBox's search help should be enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchHelpText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>(optional) The text to use for the search help entry.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchHelpAdditionalText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>(optional) The additional Text to use for the search help entry.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchHelpIcon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>(optional) The src of the icon to use for the search help entry.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxHistoryItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of history items in the list.
If 0 no history is displayed or stored. The history is locally stored on the client. Therefore do not activate this feature when this control handles confidential data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchHelp" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired whenever the configured searchHelpItem is clicked or the searchHelpItem is configured and F4 key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.FileUploader'-->
<xsd:complexType name="_FileUploaderType">
<xsd:complexContent>
<xsd:extension base=":_FileUploaderType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.FileUploaderParameter'-->
<xsd:complexType name="_FileUploaderParameterType">
<xsd:complexContent>
<xsd:extension base=":_FileUploaderParameterType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.FormattedTextView'-->
<xsd:complexType name="_FormattedTextViewType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="controls" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Array of controls that should be replaced within htmlText</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="accessibleRole" type="n0:_AccessibleRoleType">
<xsd:annotation>
<xsd:documentation>The ARIA role for the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="htmlText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text with placeholders</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.HorizontalDivider'-->
<xsd:complexType name="_HorizontalDividerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the divider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n2:_HorizontalDividerTypeType">
<xsd:annotation>
<xsd:documentation>Defines the type of the divider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n2:_HorizontalDividerHeightType">
<xsd:annotation>
<xsd:documentation>Defines the height of the divider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Image'-->
<xsd:complexType name="_ImageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="src" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Relative or absolute path to URL where the image file is stored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="decorative" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alt" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The alternative text that is displayed in case the Image is not available, or cannot be displayed.
If the image is set to decorative this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useMap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the image map that defines the clickable areas</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks on the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ImageMap'-->
<xsd:complexType name="_ImageMapType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="areas" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Area representing the reference to the target location</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:Area" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name for the image that serves as reference</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event for the areas that can be clicked in an ImageMap</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.InPlaceEdit'-->
<xsd:complexType name="_InPlaceEditType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content control of the InPlaceEdit.
The following controls are allowed:
TextField, ComboBox, DropdownBox and Link</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors related to the InPlaceEdit. Possible values: Warning, Error, Success.
If the content control has a own valueState property this will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="undoEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If undo is enabled after changing the text an undo button appears.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_TextViewDesignType">
<xsd:annotation>
<xsd:documentation>Defines the visual appearance of the control.
Currently this is not supported for Labels.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the text in the field has changed AND the focus leaves the InPlaceEdit or the Enter key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event if fired during typing into the InPlaceEdit and returns the currently entered value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Label'-->
<xsd:complexType name="_LabelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="design" type="n2:_LabelDesignType">
<xsd:annotation>
<xsd:documentation>Labels can have bold format.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether a line wrapping shall be displayed when the text value is longer than the width</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control width as common CSS-size (px or % as unit, for example).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to be displayed in the control.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="required" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Allows to enforce the required indicator even when the associated control doesn't have a getRequired method (a required property) or when the flag is not set.
If the associated control has a required property, the values of both required flags are combined with the OR operator, so a Label can't override a required=true value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="requiredAtBegin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set the required indicator is at the begin of the label, if not set at the end.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelFor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to the labeled control.
By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Link'-->
<xsd:complexType name="_LinkType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Link text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the link can be triggered by the user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="helpId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier used for help service.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user clicks the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ListBox'-->
<xsd:complexType name="_ListBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of items to be displayed. Must be either of type sap.ui.core.ListItem or sap.ui.core.SeparatorItem.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Value "true" makes the list box interactive.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled controls have another color display depending on custom settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="allowMultiSelect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether multiple selection is allowed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control width as common CSS-size (px or % as unit, for example).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control height as common CSS-size (px or % as unit, for example).
The setting overrides any definitions made for the setVisibleItems() method.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollTop" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Scroll bar position from the top. Setting the scrollTop property and calling scrollToIndex are two operations influencing the same "physical" property, so the last call "wins".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayIcons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the icons of the list items shall also be displayed. Enabling icons requires some space to be reserved for them. Displaying icons can also
influence the width and height of a single item, which affects the overall height of the ListBox when defined in number of items.
Note that the number of icons that can be displayed in the ListBox depends on the size of the icons themselves and of the total ListBox height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displaySecondaryValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the text values from the additionalText property (see sap.ui.core.ListItems) shall be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueTextAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>The text alignment in the primary ListBox column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValueTextAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>The text alignment in the secondary ListBox text column (if available).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The minimum width of the ListBox. If not set, there is no minimum width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The maximum width of the ListBox. If not set, there is no maximum width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ListBox height in number of items that are initially displayed without scrolling. This setting overwrites height
settings in terms of CSS size that have been made. When the items have different heights, the height of the first item is used for all
other item height calculations. Note that if there are one or more separators between the visible ListBox items, the displayed items
might not relate 1:1 to the initially specified number of items. When the value is retrieved, it equals the previously set value if it was set;
otherwise, it will be the number of items completely fitting into the ListBox without scrolling in the case the control was already rendered.
Note that if the control was not rendered, the behavior will be undefined, it may return -1 or any other number.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection is changed by user interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Menu'-->
<xsd:complexType name="_MenuType">
<xsd:complexContent>
<xsd:extension base=":_MenuType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MenuBar'-->
<xsd:complexType name="_MenuBarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="null:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of menu items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="null:MenuItem" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When the MenuBar is not enabled, automatically all single menu items are also displayed as 'disabled'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies the width of the MenuBar</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_MenuBarDesignType">
<xsd:annotation>
<xsd:documentation>Available design options are Header and Standard. Note that design settings are theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MenuButton'-->
<xsd:complexType name="_MenuButtonType">
<xsd:complexContent>
<xsd:extension base="n2:_ButtonType">
<xsd:sequence>
<!--default aggregation 'menu'-->
<xsd:element ref="null:Menu" minOccurs="0"/>
<xsd:element name="menu" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Menu that shall be opened when the button is clicked</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="null:Menu" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="dockButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The position / edge (see sap.ui.core.Popup.Dock) of the button where the menu is docked. Default is 'begin bottom'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dockMenu" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The position / edge (see sap.ui.core.Popup.Dock) of the menu which is docked to the button. Default is 'begin top'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="itemSelected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event that is fired when a menu item is selected by the user</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MenuItem'-->
<xsd:complexType name="_MenuItemType">
<xsd:complexContent>
<xsd:extension base=":_MenuItemType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MenuTextFieldItem'-->
<xsd:complexType name="_MenuTextFieldItemType">
<xsd:complexContent>
<xsd:extension base=":_MenuTextFieldItemType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Message'-->
<xsd:complexType name="_MessageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="type" type="n2:_MessageTypeType">
<xsd:annotation>
<xsd:documentation>"Success", or "Warning", or "Error" messages. (Mandatory)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Message short text. (Mandatory)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="associatedElementId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Associated UI element ID. (Optional)
For navigation to error field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Internal attribute, used to force the display of the "short" or the "long" text only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MessageBar'-->
<xsd:complexType name="_MessageBarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="anchorID" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Element ID upon which the 'message bar' is to be initially positioned.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible controls are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxToasted" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of simultaneous messages being toasting-up in a row. Value '0' means this dynamic part of the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxListed" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="anchorSnapPoint" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Type: sap.ui.core.Popup.Dock
SnapPoint of MessageBar over anchorId.
Note: Use "begin" or "end" for RTL support.
Note: "center" is not indicated, as positioning is only set once, either via the css "left" or the "right" attribute. Therefore a MessageBar will only be extended in one direction, as Messages come in.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MessageList'-->
<xsd:complexType name="_MessageListType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>To open or close the Control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="anchorId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the anchor under which the MessageList is to render.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxListed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.MessageToast'-->
<xsd:complexType name="_MessageToastType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="anchorId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the anchor on top of which the MessageToast is to render.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="next" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired once the "toast()" method is over, so that the MessageBar can toast() another message if needed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Paginator'-->
<xsd:complexType name="_PaginatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="currentPage" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Represents the current page (first page has index 1, not 0, to match the visual number)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Represents the overall number of pages that are embedded into the parent control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="page" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user navigates to another page by selecting it directly, or by jumping forward/backward.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Panel'-->
<xsd:complexType name="_PanelType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregates the controls that are contained in the Panel. It is recommended to use a layout control as single direct child.
When the Panel dimensions are set, the child control may have width and height of 100%. When the dimensions are not set, the child defines
the Panel size.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregates the title element of the Panel. For text titles only, you alternatively could use setText() which also creates a title in the background.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Title" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The buttons that shall be displayed in the Panel header</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Panel width in CSS size</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Per default, the height for the Panel is automatically adjusted to the content. Dimension allows to explicitly specify the height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Represents the state of the of the Panel (enabled or disabled)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollLeft" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the scroll position from left to right. Value "0" means leftmost position.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="scrollTop" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the scroll position from top to bottom. Value "0" means topmost position.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="applyContentPadding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Padding is theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="collapsed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A collapsed Panel consumes less space than a not collapsed one. When it is initially collapsed, the contents are not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="areaDesign" type="n2:_AreaDesignType">
<xsd:annotation>
<xsd:documentation>Defines the background color. Note that color settings are theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="borderDesign" type="n2:_BorderDesignType">
<xsd:annotation>
<xsd:documentation>The Panel can have a box as border. Note that displaying borders is theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCollapseIcon" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the Panel shall have an icon for collapsing/expanding, or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used to create a simple title text for Panels that do not require an icon in the header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.PasswordField'-->
<xsd:complexType name="_PasswordFieldType">
<xsd:complexContent>
<xsd:extension base="n2:_TextFieldType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ProgressIndicator'-->
<xsd:complexType name="_ProgressIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches enabled state of the control. Disabled fields have different colors, and can not be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="barColor" type="n0:_BarColorType">
<xsd:annotation>
<xsd:documentation>The color of the bar. Enumeration sap.ui.core.BarColor provides CRITICAL (yellow), NEGATIVE (red), POSITIVE (green), NEUTRAL (blue) (default value).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text value to be displayed in the bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="percentValue" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The numerical value for the displayed length of the progress bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the current value shall be rendered inside the bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RadioButton'-->
<xsd:complexType name="_RadioButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the radio button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled controls are displayed in another color, depending on the customer settings.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can select the radio button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies the select state of the radio button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The control width depends on the text length. Alternatively, CSS-sizes in % or px can be set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options are LTR and RTL. Alternatively, the control can inherit the text direction from its parent container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the radio button group the current radio button belongs to. You can define a new name for the group.
If no new name is specified, this radio button belongs to the sapUiRbDefaultGroup per default. Default behavior of a radio button
in a group is that when one of the radio buttons in a group is selected, all others are unselected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Can be used for subsequent actions</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the user makes a change on the radio button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RadioButtonGroup'-->
<xsd:complexType name="_RadioButtonGroupType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>RadioButtons of this RadioButtonGroup</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Item" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the RadioButtonGroup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columns" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of RadioButtons displayed in one Line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user can choose a radio button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>The value state to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedIndex" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Index of the selected/checked RadioButton.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set the RadioButtonGroup is enabled, if not it is disabled. If it is disabled all RadioButtons will be shown as disabled. The enabled property of the item will not be uses in this case. If the RadioButtonGroup is enabled the enabled property of the item will define if a RadioButton is enabled or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when selection is changed by user interaction.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RangeSlider'-->
<xsd:complexType name="_RangeSliderType">
<xsd:complexContent>
<xsd:extension base="n2:_SliderType">
<xsd:attribute name="value2" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Current second value of the slider. (Position of the second grip.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RatingIndicator'-->
<xsd:complexType name="_RatingIndicatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Value 'true' is required for changes on the rating symbols.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxValue" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of displayed rating symbols</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The currently selected value. If value is set to sap.ui.commons.RatingIndicator.NoValue, the averageValue is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="averageValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>This value is shown if no value is set. This can be used to display an average Value before the user votes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconSelected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the image which shall be displayed for all selected rating symbols.
Note that when this attribute is used, also the other icon attributes need to be set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconUnselected" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the image which shall be displayed for all unselected rating symbols. If this attribute is used, a requirement is that all custom icons need to have the same size.
Note that when this attribute is used also the other icon attributes need to be set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHovered" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>The URI to the image which is displayed when the mouse hovers onto a rating symbol.
If used, a requirement is that all custom icons need to have the same size.
Note that when this attribute is used also the other icon attributes need to be set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visualMode" type="n2:_RatingIndicatorVisualModeType">
<xsd:annotation>
<xsd:documentation>Defines how float values are visualized: Full, Half, Continuous (see enumeration RatingIndicatorVisualMode)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when the user has done a rating.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ResponsiveContainer'-->
<xsd:complexType name="_ResponsiveContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="ranges" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The ranges defined for this container</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:ResponsiveContainerRange" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the responsive container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the responsive container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultContent" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The default content to show, in case the range does not provide content</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rangeSwitch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired the width of the container reaches a new range.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ResponsiveContainerRange'-->
<xsd:complexType name="_ResponsiveContainerRangeType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The minimal width for this range to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The minimal height for this range to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A key which can be used to identify the range (optional).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="content" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The content to show for this range (optional).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RichTooltip'-->
<xsd:complexType name="_RichTooltipType">
<xsd:complexContent>
<xsd:extension base="n0:_TooltipBaseType">
<xsd:sequence/>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tool tip title to be displayed in the header.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imageSrc" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>If RichTooltip contains an image, this property is used to define the source path.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property is an individual text that will be used instead of the default ValueState text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imageAltText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This is the alt text for the image</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RoadMap'-->
<xsd:complexType name="_RoadMapType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'steps'-->
<xsd:element ref="n2:RoadMapStep" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="steps" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Steps that are composing the RoadMap</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:RoadMapStep" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="numberOfVisibleSteps" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Total number of steps to be displayed at once</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="firstVisibleStep" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the first step to be displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedStep" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the step which is currently selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control width in CSS size</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stepSelected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user selects a step; assumption is that this step was not selected with the previously done select action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stepExpanded" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when a given step is expanded or collapsed by user.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RoadMapStep'-->
<xsd:complexType name="_RoadMapStepType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'subSteps'-->
<xsd:element ref="n2:RoadMapStep" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="subSteps" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Sub steps for the current step. Will be displayed only in the case that the step is expanded. Otherwise, special arrows show the availability
of sub steps. One level of sub steps supported.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:RoadMapStep" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label of the step</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user shall be allowed to click a step, or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This property is only relevant when using sub steps.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Step is visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RowRepeater'-->
<xsd:complexType name="_RowRepeaterType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'rows'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="rows" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Rows to be repeated.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Title to be displayed in top left corner. Either text or icon.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:Title" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Filters to be provided in toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:RowRepeaterFilter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sorters" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Sorters to be provided in secondary toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:RowRepeaterSorter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="noData" minOccurs="0">
<xsd:annotation>
<xsd:documentation>This control is shown, in case there is no data available to be displayed in the RowRepeater.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="numberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of rows displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currentPage" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The index of the page currently displayed. The index starts at 1.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMoreSteps" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Step size used to increase the numberOfRows value. This feature is only active if value is greater than 0. This will deactivate the paging feature.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixedRowHeight" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Row height adapts to rendered content. If a fixed height is specified the cells have a maximum height and the overflow will be hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_RowRepeaterDesignType">
<xsd:annotation>
<xsd:documentation>The visual design of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="threshold" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Threshold to fetch the next chunk of data. The minimal threshold can be the numberOfRows of the RR.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered when a filter is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sort" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered when a sorting is applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="page" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered when paging was executed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is triggered when the number of rows was changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RowRepeaterFilter'-->
<xsd:complexType name="_RowRepeaterFilterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The filter title if needed for display.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The filter icon if needed for display.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filters" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The set of filter objects.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.RowRepeaterSorter'-->
<xsd:complexType name="_RowRepeaterSorterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The sorter title if needed for display.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The sorter icon if needed for display.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sorter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The sorter object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.SearchField'-->
<xsd:complexType name="_SearchFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="searchProvider" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Search provider instance which handles the suggestions for this SearchField (e.g. Open Search Protocol).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n0:SearchProvider" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enableListSuggest" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether a pop up list shall be provided for suggestions</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showListExpander" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the list expander shall be displayed in the case of an enabled list for suggestions. This feature is deactivated on mobile devices.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableClear" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the clear functionality shall be active</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showExternalButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether an additional search button shall be displayed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableCache" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When list suggestion is enabled all suggestions are cached and no suggest event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableFilterMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the search event should also be fired when the SearchField is empty (like a Filter field) and when the clear button (if activated) is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text that shall be displayed within the search field</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled fields have different colors, and they can not be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Non-editable controls have different colors, depending on custom settings</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Control width in CSS-size</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleItemCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the number of items in the suggestion list that shall be displayed at once. If the overall number of list items is higher than the setting,
a scroll bar is provided.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="startSuggestion" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Minimum length of the entered string triggering the suggestion list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSuggestionItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of suggestion items in the suggestion list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxHistoryItems" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of history items in the suggestion list.
0 displays and stores no history. The history is locally stored on the client. Therefore do not activate this feature when this control handles confidential data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event which is fired when the user triggers a search</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suggest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event which is fired when new suggest values are required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.SearchProvider'-->
<xsd:complexType name="_SearchProviderType">
<xsd:complexContent>
<xsd:extension base="n0:_OpenSearchProviderType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.SegmentedButton'-->
<xsd:complexType name="_SegmentedButtonType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="buttons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Buttons</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:Button" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedButton" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Selected Button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired when button selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Slider'-->
<xsd:complexType name="_SliderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the horizontal slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="min" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Minimal value of the slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="max" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Maximal value of the slider</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Current value of the slider. (Position of the grip.)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smallStepWidth" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The grip can only be moved in steps of this width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="totalUnits" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of units that are displayed by ticks. The PageUp and PageDown keys navigate according to these units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stepLabels" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Display step numbers for the ticks on the slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using the slider interactively requires value "true".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches enabled state of the control. Disabled fields have different colors, and can not be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labels" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Labels to be displayed instead of numbers. Attribute totalUnits and label count should be the same</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vertical" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Orientation of slider</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the vertical slider.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value was changed. This event is fired if the value has changed by an user action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value was changed. This event is fired during the mouse move. The normal change event is only fired by mouseup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Splitter'-->
<xsd:complexType name="_SplitterType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="firstPaneContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls inside the first pane. These are the left ones in case of defining a vertical splitter, and the top ones in case of using the horizontal splitter.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="secondPaneContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls inside the second pane. These are the right ones in case of defining a vertical splitter, and the bottom ones in case of using the horizontal splitter.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="splitterOrientation" type="n0:_OrientationType">
<xsd:annotation>
<xsd:documentation>The splitter can have horizontal or vertical orientation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="splitterPosition" type="n0:_PercentageType">
<xsd:annotation>
<xsd:documentation>Position of splitter bar in percentage.
The default value means that the splitter is positioned in the middle of the area that is available for the splitter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minSizeFirstPane" type="n0:_PercentageType">
<xsd:annotation>
<xsd:documentation>The minimum size (width for vertical splitter or height for horizontal splitter) of the first Pane</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minSizeSecondPane" type="n0:_PercentageType">
<xsd:annotation>
<xsd:documentation>The minimum size (width for vertical splitter or height for horizontal splitter) of the second Pane</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n2:_SplitterSizeType">
<xsd:annotation>
<xsd:documentation>The width of the split area in px or in %</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n2:_SplitterSizeType">
<xsd:annotation>
<xsd:documentation>The height of the split area in px or in %</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showScrollBars" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies if the browser should display scroll bars or simply cut the content of a splitter pane when the content does not fit into its pane.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="splitterBarVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>set the splitter bar to be visible or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Tab'-->
<xsd:complexType name="_TabType">
<xsd:complexContent>
<xsd:extension base="n2:_PanelType">
<xsd:attribute name="verticalScrolling" type="n0:_ScrollingType">
<xsd:annotation>
<xsd:documentation>Set the height property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="n0:_ScrollingType">
<xsd:annotation>
<xsd:documentation>Set the width property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="closable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the tab contains a close button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the tab is the active one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TabStrip'-->
<xsd:complexType name="_TabStripType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'tabs'-->
<xsd:element ref="n2:Tab" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="tabs" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregating tabs contained in the tab strip.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:Tab" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height includes tab bar and content area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width includes tab bar and content area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectedIndex" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Index of the currently selected tab.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user selects a tab.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="close" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the user closes a tab.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TextArea'-->
<xsd:complexType name="_TextAreaType">
<xsd:complexContent>
<xsd:extension base="n2:_TextFieldType">
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of text field. When it is set (CSS-size such as % or px), this is the exact size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cols" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of Columns. Cols means number of characters per row. This proprty is only used if Width is not used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of Rows. This proprty is only used if Height is not used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="n0:_WrappingType">
<xsd:annotation>
<xsd:documentation>Text wrapping. Possible values are: Soft, Hard, Off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cursorPos" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Position of cursor, e.g., to let the user re-start typing at the same position as before the server roundtrip</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="explanation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>text which appears, in case quick-help is switched on</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labeledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of label control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TextField'-->
<xsd:complexType name="_TextFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text inside the textfield</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Direction of the text. Possible values: rtl, ltr.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches enabled state of the control. Disabled fields have different colors, and can not be focused.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Switches edit state of the control. Read-only fields have different colors, depending on customer setting.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="required" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Depending on theme the TextField is shown as required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of text field. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text field length defines the width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imeMode" type="n0:_ImeModeType">
<xsd:annotation>
<xsd:documentation>State of the Input Method Editor (IME).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n0:_DesignType">
<xsd:annotation>
<xsd:documentation>Font type. Standard, Monospace</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="helpId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier used for help service.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessibleRole" type="n0:_AccessibleRoleType">
<xsd:annotation>
<xsd:documentation>Accessibility role for the text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Placeholder for the text field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the text in the field has changed AND the focus leaves the TextField or the Enter key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event if fired during typing into the TextField and returns the currently enterted value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TextView'-->
<xsd:complexType name="_TextViewType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>Available options are LTR and RTL. Alternatively, the control can inherit the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When the control is disabled, it is greyed out and no longer focusable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="helpId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier used for help services.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessibleRole" type="n0:_AccessibleRoleType">
<xsd:annotation>
<xsd:documentation>The ARIA role for the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_TextViewDesignType">
<xsd:annotation>
<xsd:documentation>Defines the visual appearance of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disabled automatic wrapping of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticColor" type="n2:_TextViewColorType">
<xsd:annotation>
<xsd:documentation>Semantic color of the text View</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Sets the horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the TextView</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Title'-->
<xsd:complexType name="_TitleType">
<xsd:complexContent>
<xsd:extension base="n0:_TitleType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ToggleButton'-->
<xsd:complexType name="_ToggleButtonType">
<xsd:complexContent>
<xsd:extension base="n2:_ButtonType">
<xsd:attribute name="pressed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The property is “true” when the control is toggled. The default state of this property is "false".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Toolbar'-->
<xsd:complexType name="_ToolbarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregating the tool bar items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="rightItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregating the right side tool bar items.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>When there is not enough space for the toolbar to display all items, the rightmost items are overflowing into a drop-down menu.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_ToolbarDesignType">
<xsd:annotation>
<xsd:documentation>Design settings are theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="standalone" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Per default, tool bars have the stand alone status.
Alternatively, they can be nested in other controls and then inherit the design from their parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ToolbarSeparator'-->
<xsd:complexType name="_ToolbarSeparatorType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="displayVisualSeparator" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to false, there is no visual indication of separation by a vertical line but by a wider space.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="design" type="n2:_ToolbarSeparatorDesignType">
<xsd:annotation>
<xsd:documentation>Design of the Separator.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.Tree'-->
<xsd:complexType name="_TreeType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'nodes'-->
<xsd:element ref="n2:TreeNode" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="nodes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>First level nodes</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:TreeNode" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tree title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Tree width</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Tree height</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeader" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Tree Header is display. If false, the tree will be in a transparent mode</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHeaderIcons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show Header icons (e.g. Expand/Collapse all). Only consider if showHeader is true</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showHorizontalScrollbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Display horizontal scrollbar. If false, the overflow content will be hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Minimal width for the Tree. Can be useful when, for example, the width is specified in percentage, to avoid the tree to become too narrow when container is resize</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionMode" type="n2:_TreeSelectionModeType">
<xsd:annotation>
<xsd:documentation>Selection mode of the Tree.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when a tree node is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>fired when the selection of the tree has been changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TreeNode'-->
<xsd:complexType name="_TreeNodeType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'nodes'-->
<xsd:element ref="n2:TreeNode" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="nodes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Subnodes for the current node</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:TreeNode" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Node text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Node is expanded</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hasExpander" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Should the node has an expander.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="icon" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Icon to display in front of the node</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isSelected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Node is selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The node is selectable. If true, clicking on the node text triggers "selected" event</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaDescribedBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toggleOpenState" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Node state has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Node is selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.TriStateCheckBox'-->
<xsd:complexType name="_TriStateCheckBoxType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="selectionState" type="n2:_TriStateCheckBoxStateType">
<xsd:annotation>
<xsd:documentation>Defines the states of the checkbox</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the text displayed next to the check box</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using this property, the control could be disabled, if required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the user shall be allowed to flag the check box</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width can be set to an absolute value. If no value is set, the control width results from the text length.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>The value can be set to LTR or RTL. Otherwise, the control inherits the text direction from its parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.ValueHelpField'-->
<xsd:complexType name="_ValueHelpFieldType">
<xsd:complexContent>
<xsd:extension base="n2:_TextFieldType">
<xsd:attribute name="iconURL" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Url of the standard icon for the value help. If no parameter is supplied the default icon image will be shown.
This can be an URI to an image or an icon font URI.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconHoverURL" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>URL of the icon for the value help when hovered. If no parameter is supplied the standard icon image will be shown.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="iconDisabledURL" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>URL of the icon for the value help when disabled. If no parameter is supplied the default icon image will be shown.
If a icon font icon is used, this property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueHelpRequest" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event which is fired when the ValueHelp is requested.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.Form'-->
<xsd:complexType name="_FormType">
<xsd:complexContent>
<xsd:extension base="n1:_FormType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.FormContainer'-->
<xsd:complexType name="_FormContainerType">
<xsd:complexContent>
<xsd:extension base="n1:_FormContainerType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.FormElement'-->
<xsd:complexType name="_FormElementType">
<xsd:complexContent>
<xsd:extension base="n1:_FormElementType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.FormLayout'-->
<xsd:complexType name="_FormLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_FormLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.GridContainerData'-->
<xsd:complexType name="_GridContainerDataType">
<xsd:complexContent>
<xsd:extension base="n1:_GridContainerDataType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.GridElementData'-->
<xsd:complexType name="_GridElementDataType">
<xsd:complexContent>
<xsd:extension base="n1:_GridElementDataType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.GridLayout'-->
<xsd:complexType name="_GridLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_GridLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.ResponsiveLayout'-->
<xsd:complexType name="_ResponsiveLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_ResponsiveLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.form.SimpleForm'-->
<xsd:complexType name="_SimpleFormType">
<xsd:complexContent>
<xsd:extension base="n1:_SimpleFormType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.AbsoluteLayout'-->
<xsd:complexType name="_AbsoluteLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'positions'-->
<xsd:element ref="n2:PositionContainer" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="positions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Positioned child controls within the layout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:PositionContainer" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The overall width of the control. When not set, 100% is automatically set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The overall height of the control. When not set, 100% is automatically set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="verticalScrolling" type="n0:_ScrollingType">
<xsd:annotation>
<xsd:documentation>'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalScrolling" type="n0:_ScrollingType">
<xsd:annotation>
<xsd:documentation>'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.BorderLayout'-->
<xsd:complexType name="_BorderLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="top" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the Top area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:BorderLayoutArea" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="begin" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the Begin area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:BorderLayoutArea" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="center" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the Center area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:BorderLayoutArea" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="end" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the End area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:BorderLayoutArea" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bottom" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Represents the Bottom area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:BorderLayoutArea" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="rtl" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The RTL setting swaps the areas Begin and End. Since version 1.5.2, this property is deprecated and ignored as it conflicts with the central configuration for the page.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the overall width of the layout</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the overall height of the layout</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.BorderLayoutArea'-->
<xsd:complexType name="_BorderLayoutAreaType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls within the area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="areaId" type="n2:_BorderLayoutAreaTypesType">
<xsd:annotation>
<xsd:documentation>Defines which area the element represents: top, begin, center, end, bottom</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="overflowX" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The overflow mode of the area in horizontal direction as CSS value</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="overflowY" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The overflow mode of the area in vertical direction as CSS value</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contentAlign" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The content alignment as CSS value</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height or the width. Is not used when the area element is in Center.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Invisible controls are not rendered</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.HorizontalLayout'-->
<xsd:complexType name="_HorizontalLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_HorizontalLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.MatrixLayout'-->
<xsd:complexType name="_MatrixLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'rows'-->
<xsd:element ref="n2:MatrixLayoutRow" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="rows" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The matrix layout's individual rows.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:MatrixLayoutRow" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>CSS width of the matrix layout.
If the LayoutFixed = true a adequate width should be provided.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>CSS height of the matrix layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutFixed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the content of the colums has priority.
The default is "fixed".
If the fixed layout is used a adequate width of the MatrixLayout should be provided. Otherwise the column width displayed could be different than the given ones because of browser dependend optimazations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columns" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns. If not specified, the number of columns will be determined from the given cells.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="widths" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Widths of the columns. Use an array to define the widths of the columns.
If a column shall have an automatical sizing enter "auto" for this column width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.MatrixLayoutCell'-->
<xsd:complexType name="_MatrixLayoutCellType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The matrix layout cell's content (arbitrary controls).

If the matrix row has a defined height and the matrix has layoutFixed = true, the controls inside of a cell should all use the same unit for its height property.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="backgroundDesign" type="n2:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Determines the matrix layout cell's background design.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colSpan" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines how many columns of the underlying grid structure are occupied
by this matrix layout cell.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hAlign" type="n2:_HAlignType">
<xsd:annotation>
<xsd:documentation>Determines the horizontal alignment of the matrix layout cell's content
with the cell's borders.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="padding" type="n2:_PaddingType">
<xsd:annotation>
<xsd:documentation>Determines the padding of the matrix layout cell's content within the
cell's borders. The default value is appropriate for all cells in a
form-like layout. Consider to remove the padding on the outer layout in
case of nesting.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rowSpan" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Determines how many rows of the underlying grid structure are occupied by this matrix layout cell.
In case a row-height is used, all rows affected by the RowSpan must have the same unit.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="separation" type="n2:_SeparationType">
<xsd:annotation>
<xsd:documentation>Determines how a matrix layout cell is separated from its predecessor,
via a vertical gutter of variable width, with or without a vertical line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vAlign" type="n2:_VAlignType">
<xsd:annotation>
<xsd:documentation>Determines the vertical alignment of the matrix layout cell's content
with the cell's borders.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.MatrixLayoutRow'-->
<xsd:complexType name="_MatrixLayoutRowType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'cells'-->
<xsd:element ref="n2:MatrixLayoutCell" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="cells" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The matrix layout row's individual cells.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="n2:MatrixLayoutCell" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.PositionContainer'-->
<xsd:complexType name="_PositionContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'control'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="control" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Child control of the position container</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control" minOccurs="0"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="top" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the distance to the top of the layout (as specified in HTML)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="bottom" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the distance to the bottom of the layout (as specified in HTML)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="left" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the distance to the left of the layout (as specified in HTML)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="right" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the distance to the right of the layout (as specified in HTML)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="centerHorizontally" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
The values of the attributes left and right are ignored when this feature is activated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="centerVertically" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether this container should be centered vertically within the AbsoluteLayout area.
The values of the attributes top and bottom are ignored when this feature is activated.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.ResponsiveFlowLayout'-->
<xsd:complexType name="_ResponsiveFlowLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_ResponsiveFlowLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.ResponsiveFlowLayoutData'-->
<xsd:complexType name="_ResponsiveFlowLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n1:_ResponsiveFlowLayoutDataType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.commons.layout.VerticalLayout'-->
<xsd:complexType name="_VerticalLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_VerticalLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_ButtonStyleType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Emph">
<xsd:annotation>
<xsd:documentation>Button is emphasized.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Accept">
<xsd:annotation>
<xsd:documentation>Accept button (normally green).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Reject">
<xsd:annotation>
<xsd:documentation>Reject button (normally red).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>default style (no special styling).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_HorizontalDividerHeightType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Ruleheight">
<xsd:annotation>
<xsd:documentation>Divider gets no top and bottom margin.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Small">
<xsd:annotation>
<xsd:documentation>Divider gets a small top and bottom margin.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Medium">
<xsd:annotation>
<xsd:documentation>Divider gets a medium top and bottom margin.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Large">
<xsd:annotation>
<xsd:documentation>Divider gets a large top and bottom margin.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_HorizontalDividerTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Area">
<xsd:annotation>
<xsd:documentation>Type Area</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Page">
<xsd:annotation>
<xsd:documentation>Type Page</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_LabelDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Bold">
<xsd:annotation>
<xsd:documentation>Displays the label in bold.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Displays the label in normal mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_MenuBarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>The MenuBar appears in standard design.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>The MenuBar appears in header design.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_MessageTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Error">
<xsd:annotation>
<xsd:documentation>Error message</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Warning">
<xsd:annotation>
<xsd:documentation>Warning message</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Success">
<xsd:annotation>
<xsd:documentation>Successful message</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PaginatorEventType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="First">
<xsd:annotation>
<xsd:documentation>First page event</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Previous">
<xsd:annotation>
<xsd:documentation>Previous page event</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Goto">
<xsd:annotation>
<xsd:documentation>Go to page event</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Next">
<xsd:annotation>
<xsd:documentation>Next page event</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Last">
<xsd:annotation>
<xsd:documentation>Last page event</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_RatingIndicatorVisualModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Full">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest integer value (e.g. 1.7 -&gt; 2).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Half">
<xsd:annotation>
<xsd:documentation>Values are rounded to the nearest half value (e.g. 1.7 -&gt; 1.5).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Continuous">
<xsd:annotation>
<xsd:documentation>Values are not rounded.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_RowRepeaterDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>The RowRepeater header and footer elements, as well as the row container background, appear solid.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>The RowRepeater header and footer elements, as well as the row container background, appear transparent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="BareShell">
<xsd:annotation>
<xsd:documentation>The RowRepeater will be displayed without header, toolbar or footer. Background will be transparent.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SplitterSizeType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="(0*|([0-9]+|[0-9]*\.[0-9]+)([pP][xX]|%))"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TextViewColorType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Default color</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Positive">
<xsd:annotation>
<xsd:documentation>Positive color</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Negative">
<xsd:annotation>
<xsd:documentation>Negative color</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Critical">
<xsd:annotation>
<xsd:documentation>Critical color</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TextViewDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Displays the text in standard letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Bold">
<xsd:annotation>
<xsd:documentation>Displays the text in bold letters</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H1">
<xsd:annotation>
<xsd:documentation>Displays the text in header 1 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H2">
<xsd:annotation>
<xsd:documentation>Displays the text in header 2 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H3">
<xsd:annotation>
<xsd:documentation>Displays the text in header 3 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H4">
<xsd:annotation>
<xsd:documentation>Displays the text in header 4 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H5">
<xsd:annotation>
<xsd:documentation>Displays the text in header 5 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="H6">
<xsd:annotation>
<xsd:documentation>Displays the text in header 6 letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Italic">
<xsd:annotation>
<xsd:documentation>Displays the text in italic letters</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Small">
<xsd:annotation>
<xsd:documentation>Displays the text in smaller letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Monospace">
<xsd:annotation>
<xsd:documentation>Displays the text in monospace letters.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Underline">
<xsd:annotation>
<xsd:documentation>underlined Text</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ToolbarDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>The toolbar elements such as buttons for example have their normal visual design, and the toolbar appears solid.
The feature might be not supported by all themes.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>The controls included in the toolbar have a normal visual design where the toolbar appears transparent.
The feature might be not supported by all themes.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Flat">
<xsd:annotation>
<xsd:documentation>The included controls have a very light appearance. The feature might be not supported by all themes.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ToolbarSeparatorDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Standard">
<xsd:annotation>
<xsd:documentation>Standard Separator between controls</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="FullHeight">
<xsd:annotation>
<xsd:documentation>100% height Separator before and after specific controls</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TreeSelectionModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Multi">
<xsd:annotation>
<xsd:documentation>Select multiple rows at a time.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Single">
<xsd:annotation>
<xsd:documentation>Select one row at a time.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No rows can be selected.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Legacy">
<xsd:annotation>
<xsd:documentation>Behavior of the former Tree. It is possible to select a plurality of nodes via the API.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TriStateCheckBoxStateType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Unchecked">
<xsd:annotation>
<xsd:documentation>unchecked, default value for tri-state checkbox</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Mixed">
<xsd:annotation>
<xsd:documentation>mixed state for tri-state checkbox</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Checked">
<xsd:annotation>
<xsd:documentation>checked value for tri-state checkbox</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_AreaDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Plain">
<xsd:annotation>
<xsd:documentation>Shows the area in a plain look</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Fill">
<xsd:annotation>
<xsd:documentation>Shows the label in a filled look</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Shows the background as transparent</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BorderDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Box">
<xsd:annotation>
<xsd:documentation>Draws the border as a box around the area</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>Suppresses the border</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_OrientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Horizontal orientation</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Vertical orientation</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Border">
<xsd:annotation>
<xsd:documentation>A background design suitable for borders.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Fill1">
<xsd:annotation>
<xsd:documentation>An opaque background design that looks dark filled.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Fill2">
<xsd:annotation>
<xsd:documentation>An opaque background design that looks medium filled.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Fill3">
<xsd:annotation>
<xsd:documentation>An opaque background design that looks light filled.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Header">
<xsd:annotation>
<xsd:documentation>A background design suitable for headers.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Plain">
<xsd:annotation>
<xsd:documentation>A plain but opaque background design.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>A transparent background.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BorderLayoutAreaTypesType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="top">
<xsd:annotation>
<xsd:documentation>Value to identify the top area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="begin">
<xsd:annotation>
<xsd:documentation>Value to identify the begin area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="center">
<xsd:annotation>
<xsd:documentation>Value to identify the center area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="end">
<xsd:annotation>
<xsd:documentation>Value to identify the end area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="bottom">
<xsd:annotation>
<xsd:documentation>Value to identify the bottom area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_HAlignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Begin">
<xsd:annotation>
<xsd:documentation>Aligned towards the beginning of a line, in the current locale's writing direction.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>Horizontally centered.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>Aligned towards the end of a line, in the current locale's writing direction.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Left">
<xsd:annotation>
<xsd:documentation>Left aligned, regardless of the current locale's writing direction.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Right">
<xsd:annotation>
<xsd:documentation>Right aligned, regardless of the current locale's writing direction.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_PaddingType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No padding at all.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Begin">
<xsd:annotation>
<xsd:documentation>Top and bottom padding of 2px.
Padding of 4px towards the beginning of a line, in the current locale's
writing direction, but none towards its end.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>Top and bottom padding of 2px.
Padding of 4px towards the end of a line, in the current locale's
writing direction, but none towards its beginning.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Both">
<xsd:annotation>
<xsd:documentation>Top and bottom padding of 2px.
Padding of 4px towards both the beginning and end of a line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Neither">
<xsd:annotation>
<xsd:documentation>Top and bottom padding of 2px.
No padding towards neither the beginning nor end of a line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SeparationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No gutter at all (0px), and without a vertical line, of course.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Small">
<xsd:annotation>
<xsd:documentation>A small (17px) vertical gutter without a vertical line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SmallWithLine">
<xsd:annotation>
<xsd:documentation>A small (17px) vertical gutter with a vertical line in its middle.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Medium">
<xsd:annotation>
<xsd:documentation>A medium (31px) vertical gutter without a vertical line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MediumWithLine">
<xsd:annotation>
<xsd:documentation>A medium (31px) vertical gutter with a vertical line in its middle.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Large">
<xsd:annotation>
<xsd:documentation>A large (63px) vertical gutter without a vertical line.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="LargeWithLine">
<xsd:annotation>
<xsd:documentation>A large (63px) vertical gutter with a vertical line in its middle.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_VAlignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Bottom">
<xsd:annotation>
<xsd:documentation>Aligned at the bottom.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Middle">
<xsd:annotation>
<xsd:documentation>Vertically centered.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Top">
<xsd:annotation>
<xsd:documentation>Aligned at the top.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
